FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 2F    MOV   A,0x2F             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 03 E2 LCALL 0x03E2             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 08 10 MOV   [__r0],0x10        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 08 2B CMP   [__r0],0x2B        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 08    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 03    MOV   A,0x3              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 1B    MOV   X,0x1B             (0368)     mov  X,<__idata_start
00AC: 55 08 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 08 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 08    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 09 3E LCALL __UserModules_end|_main|__text_start|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
031D: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_em_project_Bank1
                                        (0019) export LoadConfigTBL_em_project_Bank0
                                        (0020) export LoadConfigTBL_em_project_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_em_project_Bank0:
                                        (0023) ;  Instance name I2Cm, User Module I2Cm
                                        (0024) ;  Instance name LCD, User Module LCD
                                        (0025) ;  Global Register values Bank 0
                                        (0026) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0027) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0028) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0029) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0030) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0031) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0032) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0033) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0034) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0035) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0036) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0037) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0038) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0039) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0040) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0041) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0042) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0043) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0044) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0045) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0046) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0047) 	db		ffh
                                        (0048) LoadConfigTBL_em_project_Bank1:
                                        (0049) ;  Instance name I2Cm, User Module I2Cm
                                        (0050) ;  Instance name LCD, User Module LCD
                                        (0051) ;  Global Register values Bank 1
                                        (0052) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0053) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0054) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0055) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0056) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0057) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0058) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0059) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0060) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0061) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0062) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0063) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0064) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0065) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0066) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0067) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0068) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0069) 	db		ffh
                                        (0070) AREA psoc_config(rom, rel)
                                        (0071) LoadConfigTBL_em_project_Ordered:
                                        (0072) ;  Ordered Global Register values
                                        (0073) 	M8C_SetBank0
031F: 62 00 00 MOV   REG[0x0],0x0       (0074) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0322: 71 10    OR    F,0x10             
                                        (0075) 	M8C_SetBank1
0324: 62 00 00 MOV   REG[0x0],0x0       (0076) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0327: 62 01 FF MOV   REG[0x1],0xFF      (0077) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
032A: 70 EF    AND   F,0xEF             
                                        (0078) 	M8C_SetBank0
032C: 62 03 FC MOV   REG[0x3],0xFC      (0079) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
032F: 62 02 00 MOV   REG[0x2],0x0       (0080) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0332: 71 10    OR    F,0x10             
                                        (0081) 	M8C_SetBank1
0334: 62 02 00 MOV   REG[0x2],0x0       (0082) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0337: 62 03 00 MOV   REG[0x3],0x0       (0083) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
033A: 70 EF    AND   F,0xEF             
                                        (0084) 	M8C_SetBank0
033C: 62 01 00 MOV   REG[0x1],0x0       (0085) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
033F: 62 04 00 MOV   REG[0x4],0x0       (0086) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0342: 71 10    OR    F,0x10             
                                        (0087) 	M8C_SetBank1
0344: 62 04 00 MOV   REG[0x4],0x0       (0088) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0347: 62 05 FF MOV   REG[0x5],0xFF      (0089) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
034A: 70 EF    AND   F,0xEF             
                                        (0090) 	M8C_SetBank0
034C: 62 07 FF MOV   REG[0x7],0xFF      (0091) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
034F: 62 06 00 MOV   REG[0x6],0x0       (0092) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0352: 71 10    OR    F,0x10             
                                        (0093) 	M8C_SetBank1
0354: 62 06 00 MOV   REG[0x6],0x0       (0094) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0357: 62 07 00 MOV   REG[0x7],0x0       (0095) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
035A: 70 EF    AND   F,0xEF             
                                        (0096) 	M8C_SetBank0
035C: 62 05 00 MOV   REG[0x5],0x0       (0097) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
035F: 62 08 00 MOV   REG[0x8],0x0       (0098) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0362: 71 10    OR    F,0x10             
                                        (0099) 	M8C_SetBank1
0364: 62 08 7F MOV   REG[0x8],0x7F      (0100) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0367: 62 09 80 MOV   REG[0x9],0x80      (0101) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
036A: 70 EF    AND   F,0xEF             
                                        (0102) 	M8C_SetBank0
036C: 62 0B 80 MOV   REG[0xB],0x80      (0103) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
036F: 62 0A 00 MOV   REG[0xA],0x0       (0104) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0372: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
0374: 62 0A 00 MOV   REG[0xA],0x0       (0106) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0377: 62 0B 00 MOV   REG[0xB],0x0       (0107) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
037A: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
037C: 62 09 00 MOV   REG[0x9],0x0       (0109) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
037F: 62 0C 00 MOV   REG[0xC],0x0       (0110) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0382: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
0384: 62 0C 00 MOV   REG[0xC],0x0       (0112) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0387: 62 0D 00 MOV   REG[0xD],0x0       (0113) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
038A: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
038C: 62 0F 00 MOV   REG[0xF],0x0       (0115) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
038F: 62 0E 00 MOV   REG[0xE],0x0       (0116) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0392: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
0394: 62 0E 00 MOV   REG[0xE],0x0       (0118) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0397: 62 0F 00 MOV   REG[0xF],0x0       (0119) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
039A: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
039C: 62 0D 00 MOV   REG[0xD],0x0       (0121) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
039F: 62 10 00 MOV   REG[0x10],0x0      (0122) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
03A2: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
03A4: 62 10 00 MOV   REG[0x10],0x0      (0124) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
03A7: 62 11 00 MOV   REG[0x11],0x0      (0125) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
03AA: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
03AC: 62 13 00 MOV   REG[0x13],0x0      (0127) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
03AF: 62 12 00 MOV   REG[0x12],0x0      (0128) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
03B2: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
03B4: 62 12 00 MOV   REG[0x12],0x0      (0130) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
03B7: 62 13 00 MOV   REG[0x13],0x0      (0131) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
03BA: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
03BC: 62 11 00 MOV   REG[0x11],0x0      (0133) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
03BF: 62 14 00 MOV   REG[0x14],0x0      (0134) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
03C2: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
03C4: 62 14 00 MOV   REG[0x14],0x0      (0136) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
03C7: 62 15 00 MOV   REG[0x15],0x0      (0137) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
03CA: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
03CC: 62 17 00 MOV   REG[0x17],0x0      (0139) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
03CF: 62 16 00 MOV   REG[0x16],0x0      (0140) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03D2: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
03D4: 62 16 00 MOV   REG[0x16],0x0      (0142) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03D7: 62 17 00 MOV   REG[0x17],0x0      (0143) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03DA: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
03DC: 62 15 00 MOV   REG[0x15],0x0      (0145) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03DF: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
03E1: 7F       RET                      (0147) 	ret
                                        (0148) 
                                        (0149) 
                                        (0150) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_em_project
                                        (0026) export _LoadConfig_em_project
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_0_DriveMode_2_SHADE
                                        (0034) export _Port_0_DriveMode_2_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) export Port_2_DriveMode_0_SHADE
                                        (0038) export _Port_2_DriveMode_0_SHADE
                                        (0039) export Port_2_DriveMode_1_SHADE
                                        (0040) export _Port_2_DriveMode_1_SHADE
                                        (0041) 
                                        (0042) 
                                        (0043) export NO_SHADOW
                                        (0044) export _NO_SHADOW
                                        (0045) 
                                        (0046) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0047) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0048) 
                                        (0049) AREA psoc_config(rom, rel)
                                        (0050) 
                                        (0051) ;---------------------------------------------------------------------------
                                        (0052) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0053) ;                  parameters handled by boot code, like CPU speed). This
                                        (0054) ;                  function can be called from user code, but typically it
                                        (0055) ;                  is only called from boot.
                                        (0056) ;
                                        (0057) ;       INPUTS: None.
                                        (0058) ;      RETURNS: Nothing.
                                        (0059) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0060) ;               In the large memory model currently only the page
                                        (0061) ;               pointer registers listed below are modified.  This does
                                        (0062) ;               not guarantee that in future implementations of this
                                        (0063) ;               function other page pointer registers will not be
                                        (0064) ;               modified.
                                        (0065) ;          
                                        (0066) ;               Page Pointer Registers Modified: 
                                        (0067) ;               CUR_PP
                                        (0068) ;
                                        (0069) _LoadConfigInit:
                                        (0070)  LoadConfigInit:
                                        (0071)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0072)     
03E2: 55 09 00 MOV   [0x9],0x0          (0073) 	mov		[Port_0_Data_SHADE], 0h
03E5: 55 0B 00 MOV   [0xB],0x0          (0074) 	mov		[Port_0_DriveMode_0_SHADE], 0h
03E8: 55 0C FF MOV   [0xC],0xFF         (0075) 	mov		[Port_0_DriveMode_1_SHADE], ffh
03EB: 55 0D FC MOV   [0xD],0xFC         (0076) 	mov		[Port_0_DriveMode_2_SHADE], fch
03EE: 55 0A 00 MOV   [0xA],0x0          (0077) 	mov		[Port_2_Data_SHADE], 0h
03F1: 55 0E 7F MOV   [0xE],0x7F         (0078) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
03F4: 55 0F 80 MOV   [0xF],0x80         (0079) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0080) 
03F7: 7C 03 FE LCALL 0x03FE             (0081) 	lcall	LoadConfig_em_project
03FA: 7C 03 1D LCALL 0x031D             (0082) 	lcall	LoadConfigTBL_em_project_Ordered
                                        (0083) 
                                        (0084) 
                                        (0085)     RAM_EPILOGUE RAM_USE_CLASS_4
03FD: 7F       RET                      (0086)     ret
                                        (0087) 
                                        (0088) ;---------------------------------------------------------------------------
                                        (0089) ; Load Configuration em_project
                                        (0090) ;
                                        (0091) ;    Load configuration registers for em_project.
                                        (0092) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0093) ;
                                        (0094) ;       INPUTS: None.
                                        (0095) ;      RETURNS: Nothing.
                                        (0096) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0097) ;               modified as may the Page Pointer registers!
                                        (0098) ;               In the large memory model currently only the page
                                        (0099) ;               pointer registers listed below are modified.  This does
                                        (0100) ;               not guarantee that in future implementations of this
                                        (0101) ;               function other page pointer registers will not be
                                        (0102) ;               modified.
                                        (0103) ;          
                                        (0104) ;               Page Pointer Registers Modified: 
                                        (0105) ;               CUR_PP
                                        (0106) ;
                                        (0107) _LoadConfig_em_project:
                                        (0108)  LoadConfig_em_project:
                                        (0109)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0110) 
03FE: 10       PUSH  X                  (0111) 	push	x
03FF: 70 EF    AND   F,0xEF             
                                        (0112)     M8C_SetBank0                    ; Force bank 0
0401: 50 00    MOV   A,0x0              (0113)     mov     a, 0                    ; Specify bank 0
0403: 67       ASR   A                  (0114)     asr     a                       ; Store in carry flag
                                        (0115)                                     ; Load bank 0 table:
0404: 50 01    MOV   A,0x1              (0116)     mov     A, >LoadConfigTBL_em_project_Bank0
0406: 57 58    MOV   X,0x58             (0117)     mov     X, <LoadConfigTBL_em_project_Bank0
0408: 7C 04 19 LCALL 0x0419             (0118)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0119) 
040B: 50 01    MOV   A,0x1              (0120)     mov     a, 1                    ; Specify bank 1
040D: 67       ASR   A                  (0121)     asr     a                       ; Store in carry flag
                                        (0122)                                     ; Load bank 1 table:
040E: 50 01    MOV   A,0x1              (0123)     mov     A, >LoadConfigTBL_em_project_Bank1
0410: 57 83    MOV   X,0x83             (0124)     mov     X, <LoadConfigTBL_em_project_Bank1
0412: 7C 04 19 LCALL 0x0419             (0125)     lcall   LoadConfig              ; Load the bank 1 values
0415: 70 EF    AND   F,0xEF             
                                        (0126) 
                                        (0127)     M8C_SetBank0                    ; Force return to bank 0
0417: 20       POP   X                  (0128) 	pop		x
                                        (0129) 
                                        (0130)     RAM_EPILOGUE RAM_USE_CLASS_4
0418: 7F       RET                      (0131)     ret
                                        (0132) 
                                        (0133) 
                                        (0134) 
                                        (0135) 
                                        (0136) ;---------------------------------------------------------------------------
                                        (0137) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0138) ;              pairs. Terminate on address=0xFF.
                                        (0139) ;
                                        (0140) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0141) ;           Flag Register Carry bit encodes the Register Bank
                                        (0142) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0143) ;
                                        (0144) ;  RETURNS: nothing.
                                        (0145) ;
                                        (0146) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0147) ;                X-3 Temporary store for register address
                                        (0148) ;                X-2 LSB of config table address
                                        (0149) ;                X-1 MSB of config table address
                                        (0150) ;
                                        (0151) LoadConfig:
                                        (0152)     RAM_PROLOGUE RAM_USE_CLASS_2
0419: 38 02    ADD   SP,0x2             (0153)     add     SP, 2                   ; Set up local vars
041B: 10       PUSH  X                  (0154)     push    X                       ; Save config table address on stack
041C: 08       PUSH  A                  (0155)     push    A
041D: 4F       MOV   X,SP               (0156)     mov     X, SP
041E: 56 FC 00 MOV   [X-4],0x0          (0157)     mov     [X-4], 0                ; Set default Destination to Bank 0
0421: D0 04    JNC   0x0426             (0158)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0423: 56 FC 01 MOV   [X-4],0x1          (0159)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0160) .BankSelectSaved:
0426: 18       POP   A                  (0161)     pop     A
0427: 20       POP   X                  (0162)     pop     X
0428: 70 EF    AND   F,0xEF             
042A: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0163) 
                                        (0164) LoadConfigLp:
                                        (0165)     M8C_SetBank0                    ; Switch to bank 0
                                        (0166)     M8C_ClearWDT                    ; Clear the watchdog for long inits
042D: 10       PUSH  X                  (0167)     push    X                       ; Preserve the config table address
042E: 08       PUSH  A                  (0168)     push    A
042F: 28       ROMX                     (0169)     romx                            ; Load register address from table
0430: 39 FF    CMP   A,0xFF             (0170)     cmp     A, END_CONFIG_TABLE     ; End of table?
0432: A0 1F    JZ    0x0452             (0171)     jz      EndLoadConfig           ;   Yes, go wrap it up
0434: 4F       MOV   X,SP               (0172)     mov     X, SP                   ;
0435: 48 FC 01 TST   [X-4],0x1          (0173)     tst     [X-4], 1                ; Loading IO Bank 1?
0438: A0 03    JZ    0x043C             (0174)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
043A: 71 10    OR    F,0x10             
                                        (0175)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0176) .IOBankNowSet:
043C: 54 FD    MOV   [X-3],A            (0177)     mov     [X-3], A                ; Stash the register address
043E: 18       POP   A                  (0178)     pop     A                       ; Retrieve the table address
043F: 20       POP   X                  (0179)     pop     X
0440: 75       INC   X                  (0180)     inc     X                       ; Advance to the data byte
0441: 09 00    ADC   A,0x0              (0181)     adc     A, 0
0443: 10       PUSH  X                  (0182)     push    X                       ; Save the config table address again
0444: 08       PUSH  A                  (0183)     push    A
0445: 28       ROMX                     (0184)     romx                            ; load config data from the table
0446: 4F       MOV   X,SP               (0185)     mov     X, SP                   ; retrieve the register address
0447: 59 FD    MOV   X,[X-3]            (0186)     mov     X, [X-3]
0449: 61 00    MOV   REG[X+0x0],A       (0187)     mov     reg[X], A               ; Configure the register
044B: 18       POP   A                  (0188)     pop     A                       ; retrieve the table address
044C: 20       POP   X                  (0189)     pop     X
044D: 75       INC   X                  (0190)     inc     X                       ; advance to next table entry
044E: 09 00    ADC   A,0x0              (0191)     adc     A, 0
0450: 8F D7    JMP   0x0428             (0192)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0193) EndLoadConfig:
0452: 38 FC    ADD   SP,0xFC            (0194)     add     SP, -4
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_2
0454: 7F       RET                      (0196)     ret
                                        (0197) 
                                        (0198) AREA InterruptRAM(ram, rel)
                                        (0199) 
                                        (0200) NO_SHADOW:
                                        (0201) _NO_SHADOW:
                                        (0202) ; write only register shadows
                                        (0203) _Port_0_Data_SHADE:
                                        (0204) Port_0_Data_SHADE:	BLK	1
                                        (0205) _Port_2_Data_SHADE:
                                        (0206) Port_2_Data_SHADE:	BLK	1
                                        (0207) _Port_0_DriveMode_0_SHADE:
                                        (0208) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0209) _Port_0_DriveMode_1_SHADE:
                                        (0210) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0211) _Port_0_DriveMode_2_SHADE:
                                        (0212) Port_0_DriveMode_2_SHADE:	BLK	1
                                        (0213) _Port_2_DriveMode_0_SHADE:
                                        (0214) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0215) _Port_2_DriveMode_1_SHADE:
                                        (0216) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0217) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0455: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0456: 10       PUSH  X                  (0209)     push  X
0457: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0458: B0 04    JNZ   0x045D             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
045A: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
045B: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
045D: 90 3C    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
045F: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0460: 18       POP   A                  (0220)     pop   A
0461: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0462: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0464: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0465: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0477: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0478: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0479: 67       ASR   A                  (0262)     asr   A
047A: 67       ASR   A                  (0263)     asr   A
047B: 67       ASR   A                  (0264)     asr   A
047C: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
047E: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0480: 90 19    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0482: 18       POP   A                  (0268)     pop   A                            ; Restore value
0483: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0485: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0487: 90 12    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0489: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
048A: 4B       SWAP  A,X                (0305)     swap  A,X
048B: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
048D: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
048E: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0490: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0491: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0493: A0 06    JZ    0x049A             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0495: 90 04    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0497: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0498: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
049A: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
049B: 90 5F    CALL  0x04FC             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
049D: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
049E: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
049F: 67       ASR   A                  (0390)     asr   A
04A0: 67       ASR   A                  (0391)     asr   A
04A1: 67       ASR   A                  (0392)     asr   A
04A2: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
04A4: 90 38    CALL  0x04DE             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
04A6: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
04A7: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
04A9: 40       NOP                      (0397)     nop
04AA: 40       NOP                      (0398)     nop
04AB: 40       NOP                      (0399)     nop
04AC: 90 30    CALL  0x04DE             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
04AE: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
04AF: 90 4B    CALL  0x04FC             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
04B1: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
04B2: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
04B3: 67       ASR   A                  (0436)     asr   A
04B4: 67       ASR   A                  (0437)     asr   A
04B5: 67       ASR   A                  (0438)     asr   A
04B6: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
04B8: 90 09    CALL  0x04C3             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
04BA: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
04BB: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
04BD: 40       NOP                      (0443)     nop
04BE: 40       NOP                      (0444)     nop
04BF: 40       NOP                      (0445)     nop
04C0: 90 01    CALL  0x04C3             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
04C2: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
04C3: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
04C4: 26 0A 80 AND   [0xA],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04C7: 51 0A    MOV   A,[0xA]            (0480)     mov   A,[Port_2_Data_SHADE]
04C9: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
04CB: 18       POP   A                  (0483)     pop   A
04CC: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
04CE: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
04D0: 2A 0A    OR    A,[0xA]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
04D2: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
04D4: 53 0A    MOV   [0xA],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04D6: 40       NOP                      (0489)     nop
04D7: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
04D9: 53 0A    MOV   [0xA],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04DB: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
04DD: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
04DE: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
04DF: 26 0A 80 AND   [0xA],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04E2: 2E 0A 20 OR    [0xA],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
04E5: 51 0A    MOV   A,[0xA]            (0527)     mov   A,[Port_2_Data_SHADE]
04E7: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
04E9: 18       POP   A                  (0530)     pop   A
04EA: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04EC: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04EE: 2A 0A    OR    A,[0xA]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04F0: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04F2: 53 0A    MOV   [0xA],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04F4: 40       NOP                      (0536)     NOP
04F5: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04F7: 53 0A    MOV   [0xA],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04F9: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04FB: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04FC: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04FD: 26 0A 80 AND   [0xA],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0500: 51 0A    MOV   A,[0xA]            (0574)     mov   A,[Port_2_Data_SHADE]
0502: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0504: 26 0E F0 AND   [0xE],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0507: 51 0E    MOV   A,[0xE]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0509: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
050B: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
050D: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
050F: 2E 0A 40 OR    [0xA],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0512: 51 0A    MOV   A,[0xA]            (0584)     mov   A,[Port_2_Data_SHADE]
0514: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0516: 40       NOP                      (0586)     NOP
                                        (0587) 
0517: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0518: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
051A: 2E 0A 50 OR    [0xA],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
051D: 51 0A    MOV   A,[0xA]            (0593)     mov   A,[Port_2_Data_SHADE]
051F: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0521: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0522: 40       NOP                      (0597)     nop
0523: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0525: 08       PUSH  A                  (0610)     push  A
0526: 26 0A C0 AND   [0xA],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0529: 51 0A    MOV   A,[0xA]            (0612)     mov   A,[Port_2_Data_SHADE]
052B: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
052D: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
052E: 40       NOP                      (0616)     nop                                    ; fastest PSoC
052F: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0530: 2E 0A 50 OR    [0xA],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0533: 51 0A    MOV   A,[0xA]            (0620)     mov   A,[Port_2_Data_SHADE]
0535: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0537: 40       NOP                      (0623)     nop
0538: 40       NOP                      (0624)     nop
                                        (0625) 
0539: 26 0A C0 AND   [0xA],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
053C: 51 0A    MOV   A,[0xA]            (0627)     mov   A,[Port_2_Data_SHADE]
053E: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0540: 18       POP   A                  (0630)     pop   A
0541: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0543: A0 04    JZ    0x0548             (0633)     jz    .UNLOCK
0545: 79       DEC   X                  (0634)     dec   X
0546: BF D3    JNZ   0x051A             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0548: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0549: 2E 0E 7F OR    [0xE],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
054C: 51 0E    MOV   A,[0xE]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
054E: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0550: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0552: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0554: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0555: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0556: 26 0E 80 AND   [0xE],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0559: 2E 0E 7F OR    [0xE],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
055C: 26 0F 80 AND   [0xF],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
055F: 51 0E    MOV   A,[0xE]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0561: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0563: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0565: 51 0F    MOV   A,[0xF]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0567: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0569: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
056B: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
056D: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
056F: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0571: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0573: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0575: 9F 4C    CALL  0x04C3             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0577: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0579: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
057B: 50 03    MOV   A,0x3              (0707)     mov   A,03h
057D: 9F 44    CALL  0x04C3             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
057F: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0581: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0583: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0585: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0587: 9F 3A    CALL  0x04C3             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0589: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
058B: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
058D: 50 02    MOV   A,0x2              (0720)     mov   A,02h
058F: 9F 32    CALL  0x04C3             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0591: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0593: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0595: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0597: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0599: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
059B: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
059D: 50 01    MOV   A,0x1              (0731)     mov   A,01h
059F: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
05A1: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05A3: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
05A5: 50 06    MOV   A,0x6              (0736)     mov   A,06h
05A7: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
05A9: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05AB: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
05AD: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05AF: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
05B1: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
05B3: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
05B5: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
05B7: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
05B9: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
05BB: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
05BD: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05BF: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
05C1: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
05C6: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
05C8: 10       PUSH  X                  (0791)     push  X                            ; Store COL
05C9: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
05CB: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
05CC: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
05CE: 20       POP   X                  (0795)     pop   X
                                        (0796) 
05CF: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
05D1: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
05D2: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
05D4: 78       DEC   A                  (0828)     dec   A
05D5: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
05D7: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
05E0: 08       PUSH  A                  (0871)     push  A
05E1: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
05E3: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05E5: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
05E7: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05E9: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05EB: D0 06    JNC   0x05F2             (0877)     jnc   .Delay50u_End
05ED: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05EF: 78       DEC   A                  (0880)     dec   A                              ; [4]
05F0: BF FE    JNZ   0x05EF             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05F2: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05F3: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area em_project_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
05F4: 2E 0C 03 OR    [0xC],0x3          (0125)     or   [Port_0_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
05F7: 26 0B FC AND   [0xB],0xFC         (0126)     and  [Port_0_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2Cm_DriveMode2)            
05FA: 26 0D FC AND   [0xD],0xFC         (0129)     and  [Port_0_DriveMode_2_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
05FD: 51 0D    MOV   A,[0xD]            (0130)     mov  A,[Port_0_DriveMode_2_SHADE]
05FF: 60 03    MOV   REG[0x3],A         (0131)     mov  reg[I2Cm_I2CPRTDM2],A
0601: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
0603: 51 0C    MOV   A,[0xC]            (0135)     mov  A,[Port_0_DriveMode_1_SHADE]
0605: 60 01    MOV   REG[0x1],A         (0136)     mov  reg[I2Cm_I2CPRTDM1],A
0607: 51 0B    MOV   A,[0xB]            (0137)     mov  A,[Port_0_DriveMode_0_SHADE]
0609: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2Cm_I2CPRTDM0],A
060B: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
060D: 26 09 FC AND   [0x9],0xFC         (0142)     and  [Port_0_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0610: 51 09    MOV   A,[0x9]            (0143)     mov  A,[Port_0_Data_SHADE]
0612: 60 00    MOV   REG[0x0],A         (0144)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
0614: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2Cm_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2Cm_Stop:
                                        (0171) _I2Cm_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
0615: 7F       RET                      (0174)     ret
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2Cm_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2Cm_bStatus
0616: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
0617: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0619: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
061A: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
061C: 55 2B 00 MOV   [0x2B],0x0         (0226)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
061F: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2Cm_RepStart
0622: B0 05    JNZ   0x0628             (0228)     jnz   DoRestartRx
0624: 91 AE    CALL  0x07D4             (0229)     call  I2C_DoStart                                      ; Send a start and address.
0626: 80 03    JMP   0x062A             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
0628: 91 77    CALL  0x07A1             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2Cm_bStatus
062A: 47 2B 01 TST   [0x2B],0x1         (0235)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
062D: A0 20    JZ    0x064E             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
062F: 2E 2B 10 OR    [0x2B],0x10        (0238)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
0632: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
0633: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
0635: B0 04    JNZ   0x063A             (0242)     jnz   I2C_READ
0637: 26 2B EF AND   [0x2B],0xEF        (0243)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
063A: 92 49    CALL  0x0885             (0245)     call  I2Cm_read                                        ; Read a byte
                                        (0246)     RAM_SETPAGE_CUR >I2Cm_bStatus
063C: 20       POP   X                  (0247)     pop   x                                                ; Restore x
063D: 10       PUSH  X                  (0248)     push  x
063E: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0640: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0252)     mov   A,[x+RxArrayMSB]
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0641: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
0642: 51 2C    MOV   A,[0x2C]           (0256)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0644: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
0646: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
0647: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0649: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
064C: BF E5    JNZ   0x0632             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
064E: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2Cm_NoStop
0651: B0 03    JNZ   0x0655             (0265)     jnz   SkipRxStop
0653: 92 B6    CALL  _I2Cm_SendStop     (0266)     call  I2Cm_SendStop
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2Cm_bStatus
0655: 50 00    MOV   A,0x0              (0269)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0657: 47 2B 01 TST   [0x2B],0x1         (0270)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
065A: A0 03    JZ    0x065E             (0271)     jz    End_ReadBytes
065C: 50 01    MOV   A,0x1              (0272)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
065E: 7F       RET                      (0276)     ret
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2Cm_fReadBytes:		                 
065F: 64       ASL   A                  (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
0660: 29 01    OR    A,0x1              (0316)     or    A,0x01                                       ; OR the address with the Read bit.
0662: 55 2B 00 MOV   [0x2B],0x0         (0317)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0665: 48 FD 01 TST   [X-3],0x1          (0318)     tst   [x+RxMode_X],I2Cm_RepStart
0668: B0 05    JNZ   0x066E             (0319)     jnz   DoRestartRxSmm
066A: 91 68    CALL  0x07D4             (0320)     call  I2C_DoStart                                      ; Send a start and address.
066C: 80 03    JMP   0x0670             (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
066E: 91 31    CALL  0x07A1             (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
0670: 47 2B 01 TST   [0x2B],0x1         (0325)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0673: A0 1E    JZ    0x0692             (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
0675: 2E 2B 10 OR    [0x2B],0x10        (0328)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
0678: 10       PUSH  X                  (0330)     push  x                                                ; Save X for later
0679: 7B FE    DEC   [X-2]              (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
067B: B0 04    JNZ   0x0680             (0332)     jnz   I2C_READSmm
067D: 26 2B EF AND   [0x2B],0xEF        (0333)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
0680: 92 03    CALL  0x0885             (0335)     call  I2Cm_read                                        ; Read a byte
0682: 20       POP   X                  (0336)     pop   x                                                ; Restore x
0683: 10       PUSH  X                  (0337)     push  x                                                ; Store x
0684: 59 00    MOV   X,[X+0]            (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
0686: 51 2C    MOV   A,[0x2C]           (0339)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0688: 54 00    MOV   [X+0],A            (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
068A: 20       POP   X                  (0341)     pop   x                                                ; Restore the original pointer
068B: 77 00    INC   [X+0]              (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
068D: 48 FE FF TST   [X-2],0xFF         (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
0690: BF E7    JNZ   0x0678             (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
0692: 48 FD 02 TST   [X-3],0x2          (0346)     tst   [x+RxMode_X],I2Cm_NoStop
0695: B0 03    JNZ   0x0699             (0347)     jnz   SkipRxStopSmm
0697: 92 72    CALL  _I2Cm_SendStop     (0348)     call  I2Cm_SendStop
                                        (0349) SkipRxStopSmm:
0699: 50 00    MOV   A,0x0              (0350)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
069B: 47 2B 01 TST   [0x2B],0x1         (0351)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
069E: A0 03    JZ    0x06A2             (0352)     jz    End_ReadBytesSmm
06A0: 50 01    MOV   A,0x1              (0353)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
06A2: 7F       RET                      (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2Cm_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2Cm_bStatus
06A3: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
06A4: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
06A6: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
06A7: 55 2B 00 MOV   [0x2B],0x0         (0410)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
06AA: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2Cm_RepStart
06AD: B0 05    JNZ   0x06B3             (0414)     jnz   DoRestartTx
06AF: 91 23    CALL  0x07D4             (0415)     call  I2C_DoStart                                 ; Send a start and address.
06B1: 80 03    JMP   0x06B5             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
06B3: 90 EC    CALL  0x07A1             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2Cm_bStatus
06B5: 55 2D 00 MOV   [0x2D],0x0         (0421)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
06B8: 47 2B 01 TST   [0x2B],0x1         (0422)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
06BB: A0 1A    JZ    0x06D6             (0423)     jz    End_WR_Loop
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
06BD: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
06BE: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
06C0: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0430)     mov   a,[x+TxArrayMSB]
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
06C1: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
06C2: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
06C4: 53 2C    MOV   [0x2C],A           (0435)     mov   [I2Cm_bData],a                              ; Save data in temp location
06C6: 91 36    CALL  0x07FE             (0436)     call  I2Cm_write                                  ; Write the data
                                        (0437) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
06C8: 20       POP   X                  (0439)     pop   x
06C9: 47 2B 01 TST   [0x2B],0x1         (0440)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
06CC: A0 0E    JZ    0x06DB             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
06CE: 76 2D    INC   [0x2D]             (0442)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
06D0: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
06D2: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
06D4: BF E8    JNZ   0x06BD             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
06D6: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2Cm_NoStop
06D9: B0 03    JNZ   0x06DD             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
06DB: 92 2E    CALL  _I2Cm_SendStop     (0450)     call  I2Cm_SendStop
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2Cm_bStatus
06DD: 51 2D    MOV   A,[0x2D]           (0453)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
06DF: 7F       RET                      (0457)     ret
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2Cm_bWriteBytes:						       
06E0: 64       ASL   A                  (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
06E1: 55 2B 00 MOV   [0x2B],0x0         (0501)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
06E4: 48 FD 01 TST   [X-3],0x1          (0504)     tst   [x+TxMode_X],I2Cm_RepStart
06E7: B0 05    JNZ   0x06ED             (0505)     jnz   DoRestartTxSmm
06E9: 90 E9    CALL  0x07D4             (0506)     call  I2C_DoStart                                 ; Send a start and address.
06EB: 80 03    JMP   0x06EF             (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
06ED: 90 B2    CALL  0x07A1             (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
06EF: 55 2D 00 MOV   [0x2D],0x0         (0511)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
06F2: 47 2B 01 TST   [0x2B],0x1         (0512)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
06F5: A0 18    JZ    0x070E             (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
06F7: 10       PUSH  X                  (0515)     push  x                                           ; Save X for later
06F8: 59 00    MOV   X,[X+0]            (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
06FA: 52 00    MOV   A,[X+0]            (0517)     mov   a,[x]                                       ; Get data pointer to by X
06FC: 53 2C    MOV   [0x2C],A           (0518)     mov   [I2Cm_bData],a                              ; Save data in temp location
06FE: 90 FE    CALL  0x07FE             (0519)     call  I2Cm_write                                  ; Write the data
0700: 20       POP   X                  (0520)     pop   x
0701: 47 2B 01 TST   [0x2B],0x1         (0521)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0704: A0 0E    JZ    0x0713             (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
0706: 76 2D    INC   [0x2D]             (0523)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0708: 77 00    INC   [X+0]              (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
070A: 7B FE    DEC   [X-2]              (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
070C: BF EA    JNZ   0x06F7             (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
070E: 48 FD 02 TST   [X-3],0x2          (0528)     tst   [x+TxMode_X],I2Cm_NoStop
0711: B0 03    JNZ   0x0715             (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
0713: 91 F6    CALL  _I2Cm_SendStop     (0531)     call  I2Cm_SendStop
                                        (0532) SkipTxStopSmm:
0715: 51 2D    MOV   A,[0x2D]           (0533)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
0717: 7F       RET                      (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2Cm_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2Cm_bStatus
0718: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0719: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
071B: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
071C: 55 2B 00 MOV   [0x2B],0x0         (0587)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
071F: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
0722: B0 05    JNZ   0x0728             (0591)     jnz   DoCRestartTx                                ; should executed.
0724: 90 AE    CALL  0x07D4             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0726: 80 03    JMP   0x072A             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0728: 90 77    CALL  0x07A1             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2Cm_bStatus
072A: 55 2D 00 MOV   [0x2D],0x0         (0599)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
072D: 47 2B 01 TST   [0x2B],0x1         (0600)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0730: A0 1D    JZ    0x074E             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0732: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0733: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0735: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0737: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0738: 53 2C    MOV   [0x2C],A           (0608)     mov   [I2Cm_bData],a                              ; Save data in temp location
073A: 90 C2    CALL  0x07FE             (0609)     call  I2Cm_write                                  ; Write the data
                                        (0610)     RAM_SETPAGE_CUR >I2Cm_bStatus
073C: 20       POP   X                  (0611)     pop   x
073D: 47 2B 01 TST   [0x2B],0x1         (0612)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0740: A0 12    JZ    0x0753             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0742: 76 2D    INC   [0x2D]             (0614)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0744: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0746: D0 03    JNC   0x074A             (0616)     jnc   DecBCnt
0748: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
074A: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
074C: BF E5    JNZ   0x0732             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
074E: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2Cm_NoStop
0751: B0 03    JNZ   0x0755             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0753: 91 B6    CALL  _I2Cm_SendStop     (0626)     call  I2Cm_SendStop
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2Cm_bStatus
0755: 51 2D    MOV   A,[0x2D]           (0629)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0757: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2Cm_bWriteCBytes:					        
0758: 64       ASL   A                  (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
0759: 55 2B 00 MOV   [0x2B],0x0         (0676)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
075C: 48 FD 01 TST   [X-3],0x1          (0679)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
075F: B0 05    JNZ   0x0765             (0680)     jnz   DoCRestartTxSmm                                ; should executed.
0761: 90 71    CALL  0x07D4             (0681)     call  I2C_DoStart                                 ; Send a start and address.
0763: 80 03    JMP   0x0767             (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
0765: 90 3A    CALL  0x07A1             (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
0767: 55 2D 00 MOV   [0x2D],0x0         (0687)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
076A: 47 2B 01 TST   [0x2B],0x1         (0688)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
076D: A0 1D    JZ    0x078B             (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
076F: 10       PUSH  X                  (0691)     push  x                                           ; Save X for later
                                        (0692) 
0770: 52 FF    MOV   A,[X-1]            (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
0772: 59 00    MOV   X,[X+0]            (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
0774: 28       ROMX                     (0695)     romx                                              ; Put ROM Data in a
0775: 53 2C    MOV   [0x2C],A           (0696)     mov   [I2Cm_bData],a                              ; Save data in temp location
0777: 90 85    CALL  0x07FE             (0697)     call  I2Cm_write                                  ; Write the data
0779: 20       POP   X                  (0698)     pop   x
077A: 47 2B 01 TST   [0x2B],0x1         (0699)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
077D: A0 12    JZ    0x0790             (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
077F: 76 2D    INC   [0x2D]             (0701)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0781: 77 00    INC   [X+0]              (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
0783: D0 03    JNC   0x0787             (0703)     jnc   DecBCntSmm
0785: 77 FF    INC   [X-1]              (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
0787: 7B FE    DEC   [X-2]              (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
0789: BF E5    JNZ   0x076F             (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
078B: 48 FD 02 TST   [X-3],0x2          (0710)     tst   [x+TxCMode_x],I2Cm_NoStop
078E: B0 03    JNZ   0x0792             (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
0790: 91 79    CALL  _I2Cm_SendStop     (0713)     call  I2Cm_SendStop
                                        (0714) SkipTxCStopSmm:
0792: 51 2D    MOV   A,[0x2D]           (0715)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
0794: 7F       RET                      (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2Cm_start.
                                        (0749) ;
                                        (0750)  I2Cm_fSendRepeatStart:
                                        (0751) _I2Cm_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
0795: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
0796: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
0797: D0 04    JNC   0x079C             (0755)     jnc   .setRead                                ; Do a write if zero
0799: 90 06    CALL  0x07A1             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
079B: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
079C: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
079E: 90 01    CALL  0x07A1             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
07A0: 7F       RET                      (0763)     ret  
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
07A1: 08       PUSH  A                  (0768)     push  a
07A2: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
07A4: 2E 0B 02 OR    [0xB],0x2          (0770)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
07A7: 26 0B FE AND   [0xB],0xFE         (0771)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
07AA: 51 0B    MOV   A,[0xB]            (0772)     mov   A,[Port_0_DriveMode_0_SHADE]
07AC: 60 00    MOV   REG[0x0],A         (0773)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
07AE: 50 0C    MOV   A,0xC              (0776)     mov   A,I2Cm_delay3qtr
07B0: 91 88    CALL  0x093A             (0777)     call  I2Cm_delay
                                        (0778)                                                            ; Release SCL high
07B2: 26 0B FD AND   [0xB],0xFD         (0779)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
07B5: 51 0B    MOV   A,[0xB]            (0780)     mov   A,[Port_0_DriveMode_0_SHADE]
07B7: 60 00    MOV   REG[0x0],A         (0781)     mov   reg[I2Cm_I2CPRTDM0],A
07B9: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
07BB: 49 00 02 TST   REG[0x0],0x2       (0786)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
07BE: AF FC    JZ    0x07BB             (0787)     jz    clockstretch1
                                        (0788) 
07C0: 50 0C    MOV   A,0xC              (0789)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
07C2: 91 76    CALL  0x093A             (0790)     call  I2Cm_delay
07C4: 18       POP   A                  (0791)     pop   a
07C5: 90 0D    CALL  0x07D4             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
07C7: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2Cm_write.
                                        (0826) ;
                                        (0827)  I2Cm_fSendStart:
                                        (0828) _I2Cm_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
07C8: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
07C9: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
07CA: D0 04    JNC   0x07CF             (0832)     jnc   .SetRead
07CC: 90 06    CALL  0x07D4             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
07CE: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
07CF: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
07D1: 90 01    CALL  0x07D4             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
07D3: 7F       RET                      (0840)     ret
07D4: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
07D6: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
07D7: 2E 0B 01 OR    [0xB],0x1          (0847)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
07DA: 51 0B    MOV   A,[0xB]            (0848)     mov   A,[Port_0_DriveMode_0_SHADE]
07DC: 60 00    MOV   REG[0x0],A         (0849)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0850) 
07DE: 50 05    MOV   A,0x5              (0851)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
07E0: 91 58    CALL  0x093A             (0852)     call  I2Cm_delay
07E2: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
07E3: 70 EF    AND   F,0xEF             
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2Cm_bData
07E5: 53 2C    MOV   [0x2C],A           (0856)     mov   [I2Cm_bData],A
07E7: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
07E9: 2E 0B 02 OR    [0xB],0x2          (0860)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
07EC: 51 0B    MOV   A,[0xB]            (0861)     mov   A,[Port_0_DriveMode_0_SHADE]
07EE: 60 00    MOV   REG[0x0],A         (0862)     mov   reg[I2Cm_I2CPRTDM0],A
07F0: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
07F2: 50 02    MOV   A,0x2              (0865)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
07F4: 91 44    CALL  0x093A             (0866)     call  I2Cm_delay
07F6: 90 06    CALL  0x07FE             (0867)     call   I2Cm_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
07F8: 7F       RET                      (0869)     ret
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2Cm_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0915) ;
                                        (0916) I2Cm_fWrite:
                                        (0917) _I2Cm_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2Cm_bData
07F9: 53 2C    MOV   [0x2C],A           (0920)     mov   [I2Cm_bData],A                                   ; Put data in bData
07FB: 90 01    CALL  0x07FE             (0921)     call  I2Cm_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
07FD: 7F       RET                      (0923)     ret
                                        (0924) 
                                        (0925) I2Cm_write:
                                        (0926) _I2Cm_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0929)     
07FE: 55 2E 08 MOV   [0x2E],0x8         (0930)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0801: 7A 2E    DEC   [0x2E]             (0932)     dec   [I2Cm_bit_count]
0803: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0805: 2E 0B 02 OR    [0xB],0x2          (0937)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0808: 51 0B    MOV   A,[0xB]            (0938)     mov   A,[Port_0_DriveMode_0_SHADE]
080A: 60 00    MOV   REG[0x0],A         (0939)     mov   reg[I2Cm_I2CPRTDM0],A
080C: 70 EF    AND   F,0xEF             
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2Cm_bit_count
080E: 6B 2C    RLC   [0x2C]             (0943)     rlc   [I2Cm_bData]
0810: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0812: C0 0A    JC    0x081D             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0814: 2E 0B 01 OR    [0xB],0x1          (0947)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0817: 51 0B    MOV   A,[0xB]            (0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0819: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
081B: 80 08    JMP   0x0824             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
081D: 26 0B FE AND   [0xB],0xFE         (0953)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0820: 51 0B    MOV   A,[0xB]            (0954)     mov   A,[Port_0_DriveMode_0_SHADE]
0822: 60 00    MOV   REG[0x0],A         (0955)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0824: 50 05    MOV   A,0x5              (0958)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0826: 91 12    CALL  0x093A             (0959)     call  I2Cm_delay
                                        (0960)                                                            ; Release SCL High
0828: 26 0B FD AND   [0xB],0xFD         (0961)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
082B: 51 0B    MOV   A,[0xB]            (0962)     mov   A,[Port_0_DriveMode_0_SHADE]
082D: 60 00    MOV   REG[0x0],A         (0963)     mov   reg[I2Cm_I2CPRTDM0],A
082F: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0831: 49 00 02 TST   REG[0x0],0x2       (0968)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0834: AF FC    JZ    0x0831             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0836: 50 05    MOV   A,0x5              (0971)     mov   A,I2Cm_delayhalf
0838: 91 00    CALL  0x093A             (0972)     call  I2Cm_delay
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2Cm_bit_count
083A: 3C 2E 00 CMP   [0x2E],0x0         (0975)     cmp   [I2Cm_bit_count],0
083D: BF C3    JNZ   0x0801             (0976)     jnz   writenextbit
083F: 90 01    CALL  0x0842             (0977)     call  I2Cm_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0841: 7F       RET                      (0980)     ret
0842: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2Cm_get_ack:
                                        (1009) _I2Cm_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0844: 2E 0B 02 OR    [0xB],0x2          (1013)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0847: 51 0B    MOV   A,[0xB]            (1014)     mov   A,[Port_0_DriveMode_0_SHADE]
0849: 60 00    MOV   REG[0x0],A         (1015)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
084B: 26 0B FE AND   [0xB],0xFE         (1017)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
084E: 51 0B    MOV   A,[0xB]            (1018)     mov   A,[Port_0_DriveMode_0_SHADE]
0850: 60 00    MOV   REG[0x0],A         (1019)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0852: 50 0C    MOV   A,0xC              (1021)     mov   A,I2Cm_delay3qtr
0854: 90 E4    CALL  0x093A             (1022)     call  I2Cm_delay
                                        (1023)                                                            ; Release SCL high
0856: 26 0B FD AND   [0xB],0xFD         (1024)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0859: 51 0B    MOV   A,[0xB]            (1025)     mov   A,[Port_0_DriveMode_0_SHADE]
085B: 60 00    MOV   REG[0x0],A         (1026)     mov   reg[I2Cm_I2CPRTDM0],A
085D: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
085F: 49 00 02 TST   REG[0x0],0x2       (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0862: AF FC    JZ    0x085F             (1032)     jz    clockstretch3
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0864: 26 2B FE AND   [0x2B],0xFE        (1036)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
0867: 49 00 01 TST   REG[0x0],0x1       (1037)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
086A: B0 04    JNZ   0x086F             (1038)     jnz    getack2                                         ; If ACKed, set flag
086C: 2E 2B 01 OR    [0x2B],0x1         (1039)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
086F: 50 05    MOV   A,0x5              (1042)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0871: 90 C7    CALL  0x093A             (1043)     call  I2Cm_delay
                                        (1044) 
0873: 51 2B    MOV   A,[0x2B]           (1045)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
0875: 21 01    AND   A,0x1              (1046)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0877: 7F       RET                      (1048)     ret
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2Cm_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2Cm_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2Cm_put_ack.
                                        (1079) ;
                                        (1080) I2Cm_bRead:
                                        (1081) _I2Cm_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2Cm_bStatus
0878: 55 2B 00 MOV   [0x2B],0x0         (1084)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
087B: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
087D: A0 07    JZ    0x0885             (1086)     jz    I2Cm_read                                        ; Don't ACK
087F: 2E 2B 10 OR    [0x2B],0x10        (1087)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
0882: 90 01    CALL  0x0885             (1088)     call  I2Cm_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0884: 7F       RET                      (1090)     ret
                                        (1091) 
                                        (1092) I2Cm_read:
                                        (1093) _I2Cm_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0885: 55 2E 08 MOV   [0x2E],0x8         (1096)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
0888: 7A 2E    DEC   [0x2E]             (1098)     dec   [I2Cm_bit_count]
088A: 6B 2C    RLC   [0x2C]             (1099)     rlc   [I2Cm_bData]
088C: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
088E: 2E 0B 02 OR    [0xB],0x2          (1103)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0891: 51 0B    MOV   A,[0xB]            (1104)     mov   A,[Port_0_DriveMode_0_SHADE]
0893: 60 00    MOV   REG[0x0],A         (1105)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
0895: 50 05    MOV   A,0x5              (1107)     mov   A,I2Cm_delayhalf
0897: 90 A1    CALL  0x093A             (1108)     call  I2Cm_delay
                                        (1109)                                                            ; Release SCL high
0899: 26 0B FD AND   [0xB],0xFD         (1110)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
089C: 51 0B    MOV   A,[0xB]            (1111)     mov   A,[Port_0_DriveMode_0_SHADE]
089E: 60 00    MOV   REG[0x0],A         (1112)     mov   reg[I2Cm_I2CPRTDM0],A
08A0: 70 EF    AND   F,0xEF             
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
08A2: 49 00 02 TST   REG[0x0],0x2       (1119)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
08A5: AF FC    JZ    0x08A2             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
08A7: 50 02    MOV   A,0x2              (1122)     mov   A,I2Cm_delayqtr
08A9: 90 8F    CALL  0x093A             (1123)     call  I2Cm_delay
                                        (1124) 
08AB: 26 2C FE AND   [0x2C],0xFE        (1125)     and   [I2Cm_bData],~01h                                ; Record bit received
08AE: 49 00 01 TST   REG[0x0],0x1       (1126)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
08B1: A0 04    JZ    0x08B6             (1127)     jz    readnobit
08B3: 2E 2C 01 OR    [0x2C],0x1         (1128)     or    [I2Cm_bData],01h
                                        (1129) readnobit:
08B6: 3C 2E 00 CMP   [0x2E],0x0         (1130)     cmp   [I2Cm_bit_count],0
08B9: BF CE    JNZ   0x0888             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
08BB: 90 01    CALL  0x08BE             (1133)     call   I2Cm_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
08BD: 7F       RET                      (1135)     ret
08BE: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2Cm_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2Cm_put_ack:
                                        (1167) _I2Cm_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
08C0: 2E 0B 02 OR    [0xB],0x2          (1171)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
08C3: 51 0B    MOV   A,[0xB]            (1172)     mov   A,[Port_0_DriveMode_0_SHADE]
08C5: 60 00    MOV   REG[0x0],A         (1173)     mov   reg[I2Cm_I2CPRTDM0],A
08C7: 70 EF    AND   F,0xEF             
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
08C9: 47 2B 10 TST   [0x2B],0x10        (1178)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
08CC: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
08CE: A0 0A    JZ    0x08D9             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
08D0: 2E 0B 01 OR    [0xB],0x1          (1185)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
08D3: 51 0B    MOV   A,[0xB]            (1186)     mov   A,[Port_0_DriveMode_0_SHADE]
08D5: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
08D7: 80 08    JMP   0x08E0             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
08D9: 26 0B FE AND   [0xB],0xFE         (1191)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
08DC: 51 0B    MOV   A,[0xB]            (1192)     mov   A,[Port_0_DriveMode_0_SHADE]
08DE: 60 00    MOV   REG[0x0],A         (1193)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
08E0: 50 02    MOV   A,0x2              (1196)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
08E2: 90 56    CALL  0x093A             (1197)     call  I2Cm_delay
                                        (1198)                                                            ; Release SCL high
08E4: 26 0B FD AND   [0xB],0xFD         (1199)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
08E7: 51 0B    MOV   A,[0xB]            (1200)     mov   A,[Port_0_DriveMode_0_SHADE]
08E9: 60 00    MOV   REG[0x0],A         (1201)     mov   reg[I2Cm_I2CPRTDM0],A
08EB: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
08ED: 49 00 02 TST   REG[0x0],0x2       (1206)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
08F0: AF FC    JZ    0x08ED             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
08F2: 50 05    MOV   A,0x5              (1209)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
08F4: 90 44    CALL  0x093A             (1210)     call  I2Cm_delay
08F6: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
08F8: 2E 0B 02 OR    [0xB],0x2          (1213)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
08FB: 51 0B    MOV   A,[0xB]            (1214)     mov   A,[Port_0_DriveMode_0_SHADE]
08FD: 60 00    MOV   REG[0x0],A         (1215)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
08FF: 26 0B FE AND   [0xB],0xFE         (1218)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0902: 51 0B    MOV   A,[0xB]            (1219)     mov   A,[Port_0_DriveMode_0_SHADE]
0904: 60 00    MOV   REG[0x0],A         (1220)     mov   reg[I2Cm_I2CPRTDM0],A
0906: 70 EF    AND   F,0xEF             
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0908: 51 2C    MOV   A,[0x2C]           (1224)     mov   A, [I2Cm_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
090A: 7F       RET                      (1226)     ret
090B: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2Cm_SendStop:
                                        (1256) _I2Cm_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
090D: 2E 0B 03 OR    [0xB],0x3          (1260)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0910: 51 0B    MOV   A,[0xB]            (1261)     mov   A,[Port_0_DriveMode_0_SHADE]
0912: 60 00    MOV   REG[0x0],A         (1262)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1263) 
0914: 50 0C    MOV   A,0xC              (1264)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0916: 90 22    CALL  0x093A             (1265)     call  I2Cm_delay
                                        (1266)                                                            ; Release SCL high
0918: 26 0B FD AND   [0xB],0xFD         (1267)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
091B: 51 0B    MOV   A,[0xB]            (1268)     mov   A,[Port_0_DriveMode_0_SHADE]
091D: 60 00    MOV   REG[0x0],A         (1269)     mov   reg[I2Cm_I2CPRTDM0],A
091F: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0921: 49 00 02 TST   REG[0x0],0x2       (1274)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0924: AF FC    JZ    0x0921             (1275)     jz    clockstretch6
0926: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0928: 50 0C    MOV   A,0xC              (1278)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
092A: 90 0E    CALL  0x093A             (1279)     call  I2Cm_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
092C: 26 0B FE AND   [0xB],0xFE         (1282)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
092F: 51 0B    MOV   A,[0xB]            (1283)     mov   A,[Port_0_DriveMode_0_SHADE]
0931: 60 00    MOV   REG[0x0],A         (1284)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1285) 
0933: 50 05    MOV   A,0x5              (1286)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0935: 90 03    CALL  0x093A             (1287)     call  I2Cm_delay
0937: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0939: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2Cm_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2Cm routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
093A: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
093B: BF FE    JNZ   0x093A             (1317)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
093D: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2Cm.asm
                                        (1325) 
                                        (1326) 
FILE: C:\Users\PHUONG~1.NGU\DOCUME~1\PSOCDE~1.4PR\EM_PRO~1\EM_EEP~1\EM_EEP~1\main.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include <stdio.h>
(0004) 
(0005) #define DEVICE 0x50
(0006) #define ADDRESS 0x00
(0007) #define MIN 0
(0008) #define MAX 128
(0009) #define DELAY 15000
(0010) 
(0011) void main(void)
(0012) {
__UserModules_end|_main|__text_start|_main:
  read                 --> X+13
  buffer               --> X+3
  i                    --> X+2
  delay                --> X+0
    093E: 10       PUSH  X
    093F: 4F       MOV   X,SP
    0940: 38 0E    ADD   SP,0xE
(0013) 	unsigned int delay;
(0014) 	unsigned char buffer[10];
(0015) 	BYTE i;
(0016) 	BYTE read;
(0017) 	
(0018) 	I2Cm_Start();
    0942: 10       PUSH  X
    0943: 7C 05 F4 LCALL _I2Cm_Start
(0019) 	LCD_Start();
    0946: 7C 05 56 LCALL _LCD_Init|LCD_Start|_LCD_Start
(0020) 	
(0021) 	
(0022) 	I2Cm_fSendStart(DEVICE, I2Cm_WRITE);
    0949: 57 00    MOV   X,0x0
    094B: 50 50    MOV   A,0x50
    094D: 7C 07 C8 LCALL _I2Cm_fSendStart
(0023) 	I2Cm_fWrite(ADDRESS);
    0950: 50 00    MOV   A,0x0
    0952: 7C 07 F9 LCALL _I2Cm_fWrite
    0955: 20       POP   X
(0024) 	for (i = MIN; i < MAX; i++) {
    0956: 56 02 00 MOV   [X+2],0x0
    0959: 80 4E    JMP   0x09A8
(0025) 		I2Cm_fWrite(0);
    095B: 10       PUSH  X
    095C: 50 00    MOV   A,0x0
    095E: 7C 07 F9 LCALL _I2Cm_fWrite
    0961: 20       POP   X
(0026) 		if ( (i+1) % 8 == 0 ) {
    0962: 52 02    MOV   A,[X+2]
    0964: 01 01    ADD   A,0x1
    0966: 53 08    MOV   [__r0],A
    0968: 50 08    MOV   A,0x8
    096A: 08       PUSH  A
    096B: 51 08    MOV   A,[__r0]
    096D: 08       PUSH  A
    096E: 7C 0A A9 LCALL 0x0AA9
    0971: 38 FF    ADD   SP,0xFF
    0973: 18       POP   A
    0974: 39 00    CMP   A,0x0
    0976: B0 2F    JNZ   0x09A6
(0027) 			I2Cm_SendStop();
    0978: 10       PUSH  X
    0979: 7C 09 0B LCALL _I2Cm_SendStop
    097C: 20       POP   X
(0028) 			for (delay = 0; delay < DELAY; delay++); // NEEDED
    097D: 56 01 00 MOV   [X+1],0x0
    0980: 56 00 00 MOV   [X+0],0x0
    0983: 80 06    JMP   0x098A
    0985: 77 01    INC   [X+1]
    0987: 0F 00 00 ADC   [X+0],0x0
    098A: 52 01    MOV   A,[X+1]
    098C: 11 98    SUB   A,0x98
    098E: 52 00    MOV   A,[X+0]
    0990: 19 3A    SBB   A,0x3A
    0992: CF F2    JC    0x0985
(0029) 			I2Cm_fSendStart(DEVICE, I2Cm_WRITE);
    0994: 10       PUSH  X
    0995: 57 00    MOV   X,0x0
    0997: 50 50    MOV   A,0x50
    0999: 7C 07 C8 LCALL _I2Cm_fSendStart
    099C: 20       POP   X
(0030) 			I2Cm_fWrite(i+1);
    099D: 52 02    MOV   A,[X+2]
    099F: 01 01    ADD   A,0x1
    09A1: 10       PUSH  X
    09A2: 7C 07 F9 LCALL _I2Cm_fWrite
    09A5: 20       POP   X
(0031) 		}
(0032) 	}
    09A6: 77 02    INC   [X+2]
    09A8: 3D 02 80 CMP   [X+2],0x80
    09AB: CF AF    JC    0x095B
(0033) 	I2Cm_SendStop();
    09AD: 10       PUSH  X
    09AE: 7C 09 0B LCALL _I2Cm_SendStop
    09B1: 20       POP   X
    09B2: 80 E8    JMP   0x0A9B
(0034) 	
(0035) 	/*I2Cm_fSendStart(DEVICE, I2Cm_WRITE);
(0036) 	I2Cm_fWrite(0);
(0037) 	for (i = 0; i < 8; i++) {
(0038) 		I2Cm_fWrite(i);
(0039) 	}
(0040) 	I2Cm_SendStop();
(0041) 	
(0042) 	for (delay = 0; delay < DELAY; delay++); // NEEDED
(0043) 	
(0044) 	I2Cm_fSendStart(DEVICE, I2Cm_WRITE);
(0045) 	I2Cm_fWrite(8);
(0046) 	for (i = 8; i < 16; i++) {
(0047) 		I2Cm_fWrite(i);
(0048) 	}
(0049) 	I2Cm_SendStop();
(0050) 	
(0051) 	for (delay = 0; delay < DELAY; delay++); // NEEDED*/
(0052) 	
(0053) 	while (1) {
(0054) 		I2Cm_fSendStart(DEVICE, I2Cm_WRITE);
    09B4: 10       PUSH  X
    09B5: 57 00    MOV   X,0x0
    09B7: 50 50    MOV   A,0x50
    09B9: 7C 07 C8 LCALL _I2Cm_fSendStart
(0055) 		I2Cm_fWrite(ADDRESS);
    09BC: 50 00    MOV   A,0x0
    09BE: 7C 07 F9 LCALL _I2Cm_fWrite
(0056) 		
(0057) 		I2Cm_fSendRepeatStart(DEVICE, I2Cm_READ);
    09C1: 57 01    MOV   X,0x1
    09C3: 50 50    MOV   A,0x50
    09C5: 7C 07 95 LCALL _I2Cm_fSendRepeatStart
    09C8: 20       POP   X
(0058) 		for (i = MIN; i < MAX - 1; i++) {
    09C9: 56 02 00 MOV   [X+2],0x0
    09CC: 80 59    JMP   0x0A26
(0059) 			for (delay = 0; delay < DELAY; delay++);
    09CE: 56 01 00 MOV   [X+1],0x0
    09D1: 56 00 00 MOV   [X+0],0x0
    09D4: 80 06    JMP   0x09DB
    09D6: 77 01    INC   [X+1]
    09D8: 0F 00 00 ADC   [X+0],0x0
    09DB: 52 01    MOV   A,[X+1]
    09DD: 11 98    SUB   A,0x98
    09DF: 52 00    MOV   A,[X+0]
    09E1: 19 3A    SBB   A,0x3A
    09E3: CF F2    JC    0x09D6
(0060) 			csprintf(buffer, "%d  ", I2Cm_bRead(I2Cm_ACKslave));
    09E5: 10       PUSH  X
    09E6: 50 01    MOV   A,0x1
    09E8: 7C 08 78 LCALL _I2Cm_bRead
    09EB: 20       POP   X
    09EC: 53 07    MOV   [__r1],A
    09EE: 50 00    MOV   A,0x0
    09F0: 08       PUSH  A
    09F1: 51 07    MOV   A,[__r1]
    09F3: 08       PUSH  A
    09F4: 50 01    MOV   A,0x1
    09F6: 08       PUSH  A
    09F7: 50 53    MOV   A,0x53
    09F9: 08       PUSH  A
    09FA: 5A 07    MOV   [__r1],X
    09FC: 06 07 03 ADD   [__r1],0x3
    09FF: 50 00    MOV   A,0x0
    0A01: 08       PUSH  A
    0A02: 51 07    MOV   A,[__r1]
    0A04: 08       PUSH  A
    0A05: 7C 0E 2D LCALL _csprintf
    0A08: 38 FA    ADD   SP,0xFA
(0061) 			LCD_Position(0,0);
    0A0A: 10       PUSH  X
    0A0B: 50 00    MOV   A,0x0
    0A0D: 57 00    MOV   X,0x0
    0A0F: 7C 05 C6 LCALL _LCD_Position
    0A12: 20       POP   X
(0062) 			LCD_PrString(buffer);
    0A13: 5A 07    MOV   [__r1],X
    0A15: 06 07 03 ADD   [__r1],0x3
    0A18: 10       PUSH  X
    0A19: 51 08    MOV   A,[__r0]
    0A1B: 08       PUSH  A
    0A1C: 51 07    MOV   A,[__r1]
    0A1E: 5C       MOV   X,A
    0A1F: 18       POP   A
    0A20: 7C 04 91 LCALL _LCD_PrString
    0A23: 20       POP   X
(0063) 		}
    0A24: 77 02    INC   [X+2]
    0A26: 3D 02 7F CMP   [X+2],0x7F
    0A29: CF A4    JC    0x09CE
(0064) 		for (delay = 0; delay < DELAY; delay++);
    0A2B: 56 01 00 MOV   [X+1],0x0
    0A2E: 56 00 00 MOV   [X+0],0x0
    0A31: 80 06    JMP   0x0A38
    0A33: 77 01    INC   [X+1]
    0A35: 0F 00 00 ADC   [X+0],0x0
    0A38: 52 01    MOV   A,[X+1]
    0A3A: 11 98    SUB   A,0x98
    0A3C: 52 00    MOV   A,[X+0]
    0A3E: 19 3A    SBB   A,0x3A
    0A40: CF F2    JC    0x0A33
(0065) 		csprintf(buffer, "%d", I2Cm_bRead(I2Cm_NAKslave));
    0A42: 10       PUSH  X
    0A43: 50 00    MOV   A,0x0
    0A45: 7C 08 78 LCALL _I2Cm_bRead
    0A48: 20       POP   X
    0A49: 53 07    MOV   [__r1],A
    0A4B: 50 00    MOV   A,0x0
    0A4D: 08       PUSH  A
    0A4E: 51 07    MOV   A,[__r1]
    0A50: 08       PUSH  A
    0A51: 50 01    MOV   A,0x1
    0A53: 08       PUSH  A
    0A54: 50 50    MOV   A,0x50
    0A56: 08       PUSH  A
    0A57: 5A 07    MOV   [__r1],X
    0A59: 06 07 03 ADD   [__r1],0x3
    0A5C: 50 00    MOV   A,0x0
    0A5E: 08       PUSH  A
    0A5F: 51 07    MOV   A,[__r1]
    0A61: 08       PUSH  A
    0A62: 7C 0E 2D LCALL _csprintf
    0A65: 38 FA    ADD   SP,0xFA
(0066) 		LCD_Position(0,0);
    0A67: 10       PUSH  X
    0A68: 50 00    MOV   A,0x0
    0A6A: 57 00    MOV   X,0x0
    0A6C: 7C 05 C6 LCALL _LCD_Position
    0A6F: 20       POP   X
(0067) 		LCD_PrString(buffer);
    0A70: 5A 07    MOV   [__r1],X
    0A72: 06 07 03 ADD   [__r1],0x3
    0A75: 10       PUSH  X
    0A76: 51 08    MOV   A,[__r0]
    0A78: 08       PUSH  A
    0A79: 51 07    MOV   A,[__r1]
    0A7B: 5C       MOV   X,A
    0A7C: 18       POP   A
    0A7D: 7C 04 91 LCALL _LCD_PrString
(0068) 		
(0069) 		I2Cm_SendStop();
    0A80: 7C 09 0B LCALL _I2Cm_SendStop
    0A83: 20       POP   X
(0070) 		
(0071) 		for (delay = 0; delay < DELAY * 6; delay++);
    0A84: 56 01 00 MOV   [X+1],0x0
    0A87: 56 00 00 MOV   [X+0],0x0
    0A8A: 80 06    JMP   0x0A91
    0A8C: 77 01    INC   [X+1]
    0A8E: 0F 00 00 ADC   [X+0],0x0
    0A91: 52 01    MOV   A,[X+1]
    0A93: 11 90    SUB   A,0x90
    0A95: 52 00    MOV   A,[X+0]
    0A97: 19 5F    SBB   A,0x5F
    0A99: CF F2    JC    0x0A8C
(0072) 	}
    0A9B: 8F 18    JMP   0x09B4
(0073) } 
    0A9D: 38 F2    ADD   SP,0xF2
    0A9F: 20       POP   X
    0AA0: 8F FF    JMP   0x0AA0
__plcall:
    0AFD: 53 02    MOV   [__rX],A
    0AFF: 28       ROMX  
    0B00: 08       PUSH  A
    0B01: 51 02    MOV   A,[__rX]
    0B03: 75       INC   X
    0B04: 09 00    ADC   A,0x0
    0B06: 28       ROMX  
    0B07: 08       PUSH  A
    0B08: 7F       RET   
_itoa:
    0B09: 10       PUSH  X
    0B0A: 4F       MOV   X,SP
    0B0B: 38 09    ADD   SP,0x9
    0B0D: 52 FA    MOV   A,[X-6]
    0B0F: 54 03    MOV   [X+3],A
    0B11: 52 F9    MOV   A,[X-7]
    0B13: 54 02    MOV   [X+2],A
    0B15: 3D F9 00 CMP   [X-7],0x0
    0B18: B0 22    JNZ   0x0B3B
    0B1A: 3D FA 00 CMP   [X-6],0x0
    0B1D: B0 1D    JNZ   0x0B3B
    0B1F: 52 FC    MOV   A,[X-4]
    0B21: 53 07    MOV   [__r1],A
    0B23: 50 30    MOV   A,0x30
    0B25: 3F 07    MVI   [__r1],A
    0B27: 52 FC    MOV   A,[X-4]
    0B29: 01 01    ADD   A,0x1
    0B2B: 53 07    MOV   [__r1],A
    0B2D: 50 00    MOV   A,0x0
    0B2F: 3F 07    MVI   [__r1],A
    0B31: 52 FC    MOV   A,[X-4]
    0B33: 53 07    MOV   [__r1],A
    0B35: 52 FB    MOV   A,[X-5]
    0B37: 53 08    MOV   [__r0],A
    0B39: 81 48    JMP   0x0C82
    0B3B: 52 FA    MOV   A,[X-6]
    0B3D: 11 00    SUB   A,0x0
    0B3F: 52 F9    MOV   A,[X-7]
    0B41: 31 80    XOR   A,0x80
    0B43: 19 80    SBB   A,0x80
    0B45: D0 26    JNC   0x0B6C
    0B47: 3D F7 00 CMP   [X-9],0x0
    0B4A: B0 21    JNZ   0x0B6C
    0B4C: 3D F8 0A CMP   [X-8],0xA
    0B4F: B0 1C    JNZ   0x0B6C
    0B51: 56 06 01 MOV   [X+6],0x1
    0B54: 52 03    MOV   A,[X+3]
    0B56: 73       CPL   A
    0B57: 53 07    MOV   [__r1],A
    0B59: 52 02    MOV   A,[X+2]
    0B5B: 73       CPL   A
    0B5C: 53 08    MOV   [__r0],A
    0B5E: 51 07    MOV   A,[__r1]
    0B60: 01 01    ADD   A,0x1
    0B62: 54 03    MOV   [X+3],A
    0B64: 51 08    MOV   A,[__r0]
    0B66: 09 00    ADC   A,0x0
    0B68: 54 02    MOV   [X+2],A
    0B6A: 80 04    JMP   0x0B6F
    0B6C: 56 06 00 MOV   [X+6],0x0
    0B6F: 52 FC    MOV   A,[X-4]
    0B71: 54 01    MOV   [X+1],A
    0B73: 52 F7    MOV   A,[X-9]
    0B75: 08       PUSH  A
    0B76: 52 F8    MOV   A,[X-8]
    0B78: 08       PUSH  A
    0B79: 52 02    MOV   A,[X+2]
    0B7B: 08       PUSH  A
    0B7C: 52 03    MOV   A,[X+3]
    0B7E: 08       PUSH  A
    0B7F: 7C 0A A2 LCALL 0x0AA2
    0B82: 38 FE    ADD   SP,0xFE
    0B84: 18       POP   A
    0B85: 53 07    MOV   [__r1],A
    0B87: 18       POP   A
    0B88: 53 08    MOV   [__r0],A
    0B8A: 51 07    MOV   A,[__r1]
    0B8C: 54 08    MOV   [X+8],A
    0B8E: 51 08    MOV   A,[__r0]
    0B90: 54 07    MOV   [X+7],A
    0B92: 50 09    MOV   A,0x9
    0B94: 13 08    SUB   A,[X+8]
    0B96: 52 07    MOV   A,[X+7]
    0B98: 31 80    XOR   A,0x80
    0B9A: 53 02    MOV   [__rX],A
    0B9C: 50 80    MOV   A,0x80
    0B9E: 1A 02    SBB   A,[__rX]
    0BA0: C0 1D    JC    0x0BBE
    0BA2: 52 01    MOV   A,[X+1]
    0BA4: 53 07    MOV   [__r1],A
    0BA6: 52 00    MOV   A,[X+0]
    0BA8: 53 08    MOV   [__r0],A
    0BAA: 51 07    MOV   A,[__r1]
    0BAC: 01 01    ADD   A,0x1
    0BAE: 54 01    MOV   [X+1],A
    0BB0: 51 08    MOV   A,[__r0]
    0BB2: 09 00    ADC   A,0x0
    0BB4: 54 00    MOV   [X+0],A
    0BB6: 52 08    MOV   A,[X+8]
    0BB8: 01 30    ADD   A,0x30
    0BBA: 3F 07    MVI   [__r1],A
    0BBC: 80 1B    JMP   0x0BD8
    0BBE: 52 01    MOV   A,[X+1]
    0BC0: 53 07    MOV   [__r1],A
    0BC2: 52 00    MOV   A,[X+0]
    0BC4: 53 08    MOV   [__r0],A
    0BC6: 51 07    MOV   A,[__r1]
    0BC8: 01 01    ADD   A,0x1
    0BCA: 54 01    MOV   [X+1],A
    0BCC: 51 08    MOV   A,[__r0]
    0BCE: 09 00    ADC   A,0x0
    0BD0: 54 00    MOV   [X+0],A
    0BD2: 52 08    MOV   A,[X+8]
    0BD4: 01 57    ADD   A,0x57
    0BD6: 3F 07    MVI   [__r1],A
    0BD8: 52 F7    MOV   A,[X-9]
    0BDA: 08       PUSH  A
    0BDB: 52 F8    MOV   A,[X-8]
    0BDD: 08       PUSH  A
    0BDE: 52 02    MOV   A,[X+2]
    0BE0: 08       PUSH  A
    0BE1: 52 03    MOV   A,[X+3]
    0BE3: 08       PUSH  A
    0BE4: 7C 0A A2 LCALL 0x0AA2
    0BE7: 18       POP   A
    0BE8: 54 03    MOV   [X+3],A
    0BEA: 18       POP   A
    0BEB: 54 02    MOV   [X+2],A
    0BED: 38 FE    ADD   SP,0xFE
    0BEF: 3D 02 00 CMP   [X+2],0x0
    0BF2: BF 80    JNZ   0x0B73
    0BF4: 3D 03 00 CMP   [X+3],0x0
    0BF7: BF 7B    JNZ   0x0B73
    0BF9: 3D 06 00 CMP   [X+6],0x0
    0BFC: A0 19    JZ    0x0C16
    0BFE: 52 01    MOV   A,[X+1]
    0C00: 53 07    MOV   [__r1],A
    0C02: 52 00    MOV   A,[X+0]
    0C04: 53 08    MOV   [__r0],A
    0C06: 51 07    MOV   A,[__r1]
    0C08: 01 01    ADD   A,0x1
    0C0A: 54 01    MOV   [X+1],A
    0C0C: 51 08    MOV   A,[__r0]
    0C0E: 09 00    ADC   A,0x0
    0C10: 54 00    MOV   [X+0],A
    0C12: 50 2D    MOV   A,0x2D
    0C14: 3F 07    MVI   [__r1],A
    0C16: 52 01    MOV   A,[X+1]
    0C18: 53 07    MOV   [__r1],A
    0C1A: 52 00    MOV   A,[X+0]
    0C1C: 53 08    MOV   [__r0],A
    0C1E: 51 07    MOV   A,[__r1]
    0C20: 01 FF    ADD   A,0xFF
    0C22: 54 01    MOV   [X+1],A
    0C24: 51 08    MOV   A,[__r0]
    0C26: 09 FF    ADC   A,0xFF
    0C28: 54 00    MOV   [X+0],A
    0C2A: 50 00    MOV   A,0x0
    0C2C: 3F 07    MVI   [__r1],A
    0C2E: 52 FC    MOV   A,[X-4]
    0C30: 54 05    MOV   [X+5],A
    0C32: 80 3D    JMP   0x0C70
    0C34: 52 05    MOV   A,[X+5]
    0C36: 53 07    MOV   [__r1],A
    0C38: 3E 07    MVI   A,[__r1]
    0C3A: 54 06    MOV   [X+6],A
    0C3C: 52 05    MOV   A,[X+5]
    0C3E: 53 07    MOV   [__r1],A
    0C40: 52 04    MOV   A,[X+4]
    0C42: 53 08    MOV   [__r0],A
    0C44: 51 07    MOV   A,[__r1]
    0C46: 01 01    ADD   A,0x1
    0C48: 54 05    MOV   [X+5],A
    0C4A: 51 08    MOV   A,[__r0]
    0C4C: 09 00    ADC   A,0x0
    0C4E: 54 04    MOV   [X+4],A
    0C50: 52 01    MOV   A,[X+1]
    0C52: 53 05    MOV   [__r3],A
    0C54: 3E 05    MVI   A,[__r3]
    0C56: 3F 07    MVI   [__r1],A
    0C58: 52 01    MOV   A,[X+1]
    0C5A: 53 07    MOV   [__r1],A
    0C5C: 52 00    MOV   A,[X+0]
    0C5E: 53 08    MOV   [__r0],A
    0C60: 51 07    MOV   A,[__r1]
    0C62: 01 FF    ADD   A,0xFF
    0C64: 54 01    MOV   [X+1],A
    0C66: 51 08    MOV   A,[__r0]
    0C68: 09 FF    ADC   A,0xFF
    0C6A: 54 00    MOV   [X+0],A
    0C6C: 52 06    MOV   A,[X+6]
    0C6E: 3F 07    MVI   [__r1],A
    0C70: 52 01    MOV   A,[X+1]
    0C72: 53 08    MOV   [__r0],A
    0C74: 52 05    MOV   A,[X+5]
    0C76: 3A 08    CMP   A,[__r0]
    0C78: CF BB    JC    0x0C34
    0C7A: 52 FC    MOV   A,[X-4]
    0C7C: 53 07    MOV   [__r1],A
    0C7E: 52 FB    MOV   A,[X-5]
    0C80: 53 08    MOV   [__r0],A
    0C82: 38 F7    ADD   SP,0xF7
    0C84: 20       POP   X
    0C85: 7F       RET   
_utoa:
    0C86: 10       PUSH  X
    0C87: 4F       MOV   X,SP
    0C88: 38 07    ADD   SP,0x7
    0C8A: 52 FC    MOV   A,[X-4]
    0C8C: 54 01    MOV   [X+1],A
    0C8E: 52 F7    MOV   A,[X-9]
    0C90: 08       PUSH  A
    0C91: 52 F8    MOV   A,[X-8]
    0C93: 08       PUSH  A
    0C94: 52 F9    MOV   A,[X-7]
    0C96: 08       PUSH  A
    0C97: 52 FA    MOV   A,[X-6]
    0C99: 08       PUSH  A
    0C9A: 7C 0A A2 LCALL 0x0AA2
    0C9D: 38 FE    ADD   SP,0xFE
    0C9F: 18       POP   A
    0CA0: 53 07    MOV   [__r1],A
    0CA2: 18       POP   A
    0CA3: 53 08    MOV   [__r0],A
    0CA5: 51 07    MOV   A,[__r1]
    0CA7: 54 06    MOV   [X+6],A
    0CA9: 51 08    MOV   A,[__r0]
    0CAB: 54 05    MOV   [X+5],A
    0CAD: 50 09    MOV   A,0x9
    0CAF: 13 06    SUB   A,[X+6]
    0CB1: 52 05    MOV   A,[X+5]
    0CB3: 31 80    XOR   A,0x80
    0CB5: 53 02    MOV   [__rX],A
    0CB7: 50 80    MOV   A,0x80
    0CB9: 1A 02    SBB   A,[__rX]
    0CBB: C0 1D    JC    0x0CD9
    0CBD: 52 01    MOV   A,[X+1]
    0CBF: 53 07    MOV   [__r1],A
    0CC1: 52 00    MOV   A,[X+0]
    0CC3: 53 08    MOV   [__r0],A
    0CC5: 51 07    MOV   A,[__r1]
    0CC7: 01 01    ADD   A,0x1
    0CC9: 54 01    MOV   [X+1],A
    0CCB: 51 08    MOV   A,[__r0]
    0CCD: 09 00    ADC   A,0x0
    0CCF: 54 00    MOV   [X+0],A
    0CD1: 52 06    MOV   A,[X+6]
    0CD3: 01 30    ADD   A,0x30
    0CD5: 3F 07    MVI   [__r1],A
    0CD7: 80 1B    JMP   0x0CF3
    0CD9: 52 01    MOV   A,[X+1]
    0CDB: 53 07    MOV   [__r1],A
    0CDD: 52 00    MOV   A,[X+0]
    0CDF: 53 08    MOV   [__r0],A
    0CE1: 51 07    MOV   A,[__r1]
    0CE3: 01 01    ADD   A,0x1
    0CE5: 54 01    MOV   [X+1],A
    0CE7: 51 08    MOV   A,[__r0]
    0CE9: 09 00    ADC   A,0x0
    0CEB: 54 00    MOV   [X+0],A
    0CED: 52 06    MOV   A,[X+6]
    0CEF: 01 57    ADD   A,0x57
    0CF1: 3F 07    MVI   [__r1],A
    0CF3: 52 F7    MOV   A,[X-9]
    0CF5: 08       PUSH  A
    0CF6: 52 F8    MOV   A,[X-8]
    0CF8: 08       PUSH  A
    0CF9: 52 F9    MOV   A,[X-7]
    0CFB: 08       PUSH  A
    0CFC: 52 FA    MOV   A,[X-6]
    0CFE: 08       PUSH  A
    0CFF: 7C 0A A2 LCALL 0x0AA2
    0D02: 18       POP   A
    0D03: 54 FA    MOV   [X-6],A
    0D05: 18       POP   A
    0D06: 54 F9    MOV   [X-7],A
    0D08: 38 FE    ADD   SP,0xFE
    0D0A: 3D F9 00 CMP   [X-7],0x0
    0D0D: BF 80    JNZ   0x0C8E
    0D0F: 3D FA 00 CMP   [X-6],0x0
    0D12: BF 7B    JNZ   0x0C8E
    0D14: 52 01    MOV   A,[X+1]
    0D16: 53 07    MOV   [__r1],A
    0D18: 52 00    MOV   A,[X+0]
    0D1A: 53 08    MOV   [__r0],A
    0D1C: 51 07    MOV   A,[__r1]
    0D1E: 01 FF    ADD   A,0xFF
    0D20: 54 01    MOV   [X+1],A
    0D22: 51 08    MOV   A,[__r0]
    0D24: 09 FF    ADC   A,0xFF
    0D26: 54 00    MOV   [X+0],A
    0D28: 50 00    MOV   A,0x0
    0D2A: 3F 07    MVI   [__r1],A
    0D2C: 52 FC    MOV   A,[X-4]
    0D2E: 54 03    MOV   [X+3],A
    0D30: 80 3D    JMP   0x0D6E
    0D32: 52 03    MOV   A,[X+3]
    0D34: 53 07    MOV   [__r1],A
    0D36: 3E 07    MVI   A,[__r1]
    0D38: 54 04    MOV   [X+4],A
    0D3A: 52 03    MOV   A,[X+3]
    0D3C: 53 07    MOV   [__r1],A
    0D3E: 52 02    MOV   A,[X+2]
    0D40: 53 08    MOV   [__r0],A
    0D42: 51 07    MOV   A,[__r1]
    0D44: 01 01    ADD   A,0x1
    0D46: 54 03    MOV   [X+3],A
    0D48: 51 08    MOV   A,[__r0]
    0D4A: 09 00    ADC   A,0x0
    0D4C: 54 02    MOV   [X+2],A
    0D4E: 52 01    MOV   A,[X+1]
    0D50: 53 05    MOV   [__r3],A
    0D52: 3E 05    MVI   A,[__r3]
    0D54: 3F 07    MVI   [__r1],A
    0D56: 52 01    MOV   A,[X+1]
    0D58: 53 07    MOV   [__r1],A
    0D5A: 52 00    MOV   A,[X+0]
    0D5C: 53 08    MOV   [__r0],A
    0D5E: 51 07    MOV   A,[__r1]
    0D60: 01 FF    ADD   A,0xFF
    0D62: 54 01    MOV   [X+1],A
    0D64: 51 08    MOV   A,[__r0]
    0D66: 09 FF    ADC   A,0xFF
    0D68: 54 00    MOV   [X+0],A
    0D6A: 52 04    MOV   A,[X+4]
    0D6C: 3F 07    MVI   [__r1],A
    0D6E: 52 01    MOV   A,[X+1]
    0D70: 53 08    MOV   [__r0],A
    0D72: 52 03    MOV   A,[X+3]
    0D74: 3A 08    CMP   A,[__r0]
    0D76: CF BB    JC    0x0D32
    0D78: 52 FC    MOV   A,[X-4]
    0D7A: 53 07    MOV   [__r1],A
    0D7C: 52 FB    MOV   A,[X-5]
    0D7E: 53 08    MOV   [__r0],A
    0D80: 38 F9    ADD   SP,0xF9
    0D82: 20       POP   X
    0D83: 7F       RET   
_isdigit:
    0D84: 10       PUSH  X
    0D85: 4F       MOV   X,SP
    0D86: 52 FC    MOV   A,[X-4]
    0D88: 01 A7    ADD   A,0xA7
    0D8A: 53 07    MOV   [__r1],A
    0D8C: 52 FB    MOV   A,[X-5]
    0D8E: 09 01    ADC   A,0x1
    0D90: 10       PUSH  X
    0D91: 58 07    MOV   X,[__r1]
    0D93: 28       ROMX  
    0D94: 20       POP   X
    0D95: 53 07    MOV   [__r1],A
    0D97: 55 08 00 MOV   [__r0],0x0
    0D9A: 26 07 04 AND   [__r1],0x4
    0D9D: 26 08 00 AND   [__r0],0x0
    0DA0: 20       POP   X
    0DA1: 7F       RET   
_islower:
    0DA2: 10       PUSH  X
    0DA3: 4F       MOV   X,SP
    0DA4: 52 FC    MOV   A,[X-4]
    0DA6: 01 A7    ADD   A,0xA7
    0DA8: 53 07    MOV   [__r1],A
    0DAA: 52 FB    MOV   A,[X-5]
    0DAC: 09 01    ADC   A,0x1
    0DAE: 10       PUSH  X
    0DAF: 58 07    MOV   X,[__r1]
    0DB1: 28       ROMX  
    0DB2: 20       POP   X
    0DB3: 53 07    MOV   [__r1],A
    0DB5: 55 08 00 MOV   [__r0],0x0
    0DB8: 26 07 02 AND   [__r1],0x2
    0DBB: 26 08 00 AND   [__r0],0x0
    0DBE: 20       POP   X
    0DBF: 7F       RET   
_isspace:
    0DC0: 10       PUSH  X
    0DC1: 4F       MOV   X,SP
    0DC2: 52 FC    MOV   A,[X-4]
    0DC4: 01 A7    ADD   A,0xA7
    0DC6: 53 07    MOV   [__r1],A
    0DC8: 52 FB    MOV   A,[X-5]
    0DCA: 09 01    ADC   A,0x1
    0DCC: 10       PUSH  X
    0DCD: 58 07    MOV   X,[__r1]
    0DCF: 28       ROMX  
    0DD0: 20       POP   X
    0DD1: 53 07    MOV   [__r1],A
    0DD3: 55 08 00 MOV   [__r0],0x0
    0DD6: 26 07 10 AND   [__r1],0x10
    0DD9: 26 08 00 AND   [__r0],0x0
    0DDC: 20       POP   X
    0DDD: 7F       RET   
_toupper:
    0DDE: 10       PUSH  X
    0DDF: 4F       MOV   X,SP
    0DE0: 52 FB    MOV   A,[X-5]
    0DE2: 08       PUSH  A
    0DE3: 52 FC    MOV   A,[X-4]
    0DE5: 08       PUSH  A
    0DE6: 7C 0D A2 LCALL _islower
    0DE9: 38 FE    ADD   SP,0xFE
    0DEB: 3C 08 00 CMP   [__r0],0x0
    0DEE: B0 06    JNZ   0x0DF5
    0DF0: 3C 07 00 CMP   [__r1],0x0
    0DF3: A0 15    JZ    0x0E09
    0DF5: 52 FC    MOV   A,[X-4]
    0DF7: 11 61    SUB   A,0x61
    0DF9: 53 07    MOV   [__r1],A
    0DFB: 52 FB    MOV   A,[X-5]
    0DFD: 19 00    SBB   A,0x0
    0DFF: 53 08    MOV   [__r0],A
    0E01: 06 07 41 ADD   [__r1],0x41
    0E04: 0E 08 00 ADC   [__r0],0x0
    0E07: 80 09    JMP   0x0E11
    0E09: 52 FC    MOV   A,[X-4]
    0E0B: 53 07    MOV   [__r1],A
    0E0D: 52 FB    MOV   A,[X-5]
    0E0F: 53 08    MOV   [__r0],A
    0E11: 20       POP   X
    0E12: 7F       RET   
__csdepi:
    0E13: 10       PUSH  X
    0E14: 4F       MOV   X,SP
    0E15: 5F 07 11 MOV   [__r1],[0x11]
    0E18: 5F 08 10 MOV   [__r0],[0x10]
    0E1B: 51 07    MOV   A,[__r1]
    0E1D: 01 01    ADD   A,0x1
    0E1F: 53 11    MOV   [0x11],A
    0E21: 51 08    MOV   A,[__r0]
    0E23: 09 00    ADC   A,0x0
    0E25: 53 10    MOV   [0x10],A
    0E27: 52 FC    MOV   A,[X-4]
    0E29: 3F 07    MVI   [__r1],A
    0E2B: 20       POP   X
    0E2C: 7F       RET   
_csprintf:
    0E2D: 10       PUSH  X
    0E2E: 4F       MOV   X,SP
    0E2F: 38 02    ADD   SP,0x2
    0E31: 52 FC    MOV   A,[X-4]
    0E33: 53 11    MOV   [0x11],A
    0E35: 5A 08    MOV   [__r0],X
    0E37: 16 08 07 SUB   [__r0],0x7
    0E3A: 51 08    MOV   A,[__r0]
    0E3C: 54 01    MOV   [X+1],A
    0E3E: 52 00    MOV   A,[X+0]
    0E40: 08       PUSH  A
    0E41: 52 01    MOV   A,[X+1]
    0E43: 08       PUSH  A
    0E44: 52 F9    MOV   A,[X-7]
    0E46: 08       PUSH  A
    0E47: 52 FA    MOV   A,[X-6]
    0E49: 08       PUSH  A
    0E4A: 50 03    MOV   A,0x3
    0E4C: 08       PUSH  A
    0E4D: 50 1B    MOV   A,0x1B
    0E4F: 08       PUSH  A
    0E50: 7C 0E 6C LCALL __cprint
    0E53: 38 FA    ADD   SP,0xFA
    0E55: 5F 07 11 MOV   [__r1],[0x11]
    0E58: 50 00    MOV   A,0x0
    0E5A: 3F 07    MVI   [__r1],A
    0E5C: 51 11    MOV   A,[0x11]
    0E5E: 13 FC    SUB   A,[X-4]
    0E60: 53 07    MOV   [__r1],A
    0E62: 51 10    MOV   A,[0x10]
    0E64: 1B FB    SBB   A,[X-5]
    0E66: 53 08    MOV   [__r0],A
    0E68: 38 FE    ADD   SP,0xFE
    0E6A: 20       POP   X
    0E6B: 7F       RET   
__cprint:
    0E6C: 10       PUSH  X
    0E6D: 4F       MOV   X,SP
    0E6E: 38 11    ADD   SP,0x11
    0E70: 56 05 00 MOV   [X+5],0x0
    0E73: 56 04 00 MOV   [X+4],0x0
    0E76: 83 4A    JMP   0x11C1
    0E78: 52 FA    MOV   A,[X-6]
    0E7A: 53 07    MOV   [__r1],A
    0E7C: 52 F9    MOV   A,[X-7]
    0E7E: 10       PUSH  X
    0E7F: 58 07    MOV   X,[__r1]
    0E81: 28       ROMX  
    0E82: 20       POP   X
    0E83: 39 25    CMP   A,0x25
    0E85: A0 23    JZ    0x0EA9
    0E87: 52 FA    MOV   A,[X-6]
    0E89: 53 07    MOV   [__r1],A
    0E8B: 52 F9    MOV   A,[X-7]
    0E8D: 10       PUSH  X
    0E8E: 58 07    MOV   X,[__r1]
    0E90: 28       ROMX  
    0E91: 20       POP   X
    0E92: 10       PUSH  X
    0E93: 08       PUSH  A
    0E94: 52 FC    MOV   A,[X-4]
    0E96: 53 07    MOV   [__r1],A
    0E98: 52 FB    MOV   A,[X-5]
    0E9A: 58 07    MOV   X,[__r1]
    0E9C: 7C 0A FD LCALL __plcall
    0E9F: 38 FF    ADD   SP,0xFF
    0EA1: 20       POP   X
    0EA2: 77 05    INC   [X+5]
    0EA4: 0F 04 00 ADC   [X+4],0x0
    0EA7: 83 14    JMP   0x11BC
    0EA9: 56 0A 00 MOV   [X+10],0x0
    0EAC: 56 09 00 MOV   [X+9],0x0
    0EAF: 56 07 12 MOV   [X+7],0x12
    0EB2: 56 06 00 MOV   [X+6],0x0
    0EB5: 56 08 20 MOV   [X+8],0x20
    0EB8: 77 FA    INC   [X-6]
    0EBA: 0F F9 00 ADC   [X-7],0x0
    0EBD: 52 FA    MOV   A,[X-6]
    0EBF: 53 07    MOV   [__r1],A
    0EC1: 52 F9    MOV   A,[X-7]
    0EC3: 10       PUSH  X
    0EC4: 58 07    MOV   X,[__r1]
    0EC6: 28       ROMX  
    0EC7: 20       POP   X
    0EC8: 54 10    MOV   [X+16],A
    0ECA: 56 0F 00 MOV   [X+15],0x0
    0ECD: 52 10    MOV   A,[X+16]
    0ECF: 11 58    SUB   A,0x58
    0ED1: 53 01    MOV   [__rY],A
    0ED3: 52 0F    MOV   A,[X+15]
    0ED5: 31 80    XOR   A,0x80
    0ED7: 19 80    SBB   A,0x80
    0ED9: 2A 01    OR    A,[__rY]
    0EDB: A0 E0    JZ    0x0FBC
    0EDD: D0 1F    JNC   0x0EFD
    0EDF: 52 10    MOV   A,[X+16]
    0EE1: 11 45    SUB   A,0x45
    0EE3: 53 01    MOV   [__rY],A
    0EE5: 52 0F    MOV   A,[X+15]
    0EE7: 31 80    XOR   A,0x80
    0EE9: 19 80    SBB   A,0x80
    0EEB: C0 83    JC    0x0F6F
    0EED: 2A 01    OR    A,[__rY]
    0EEF: A2 C4    JZ    0x11B4
    0EF1: 3D 0F 00 CMP   [X+15],0x0
    0EF4: B0 06    JNZ   0x0EFB
    0EF6: 3D 10 53 CMP   [X+16],0x53
    0EF9: A1 EE    JZ    0x10E8
    0EFB: 80 73    JMP   0x0F6F
    0EFD: 3D 0F 00 CMP   [X+15],0x0
    0F00: B0 06    JNZ   0x0F07
    0F02: 3D 10 63 CMP   [X+16],0x63
    0F05: A1 B9    JZ    0x10BF
    0F07: 3D 0F 00 CMP   [X+15],0x0
    0F0A: B0 06    JNZ   0x0F11
    0F0C: 3D 10 64 CMP   [X+16],0x64
    0F0F: A0 81    JZ    0x0F91
    0F11: 3D 0F 00 CMP   [X+15],0x0
    0F14: B0 06    JNZ   0x0F1B
    0F16: 3D 10 65 CMP   [X+16],0x65
    0F19: A2 9A    JZ    0x11B4
    0F1B: 3D 0F 00 CMP   [X+15],0x0
    0F1E: B0 06    JNZ   0x0F25
    0F20: 3D 10 66 CMP   [X+16],0x66
    0F23: A2 90    JZ    0x11B4
    0F25: 3D 0F 00 CMP   [X+15],0x0
    0F28: B0 06    JNZ   0x0F2F
    0F2A: 3D 10 69 CMP   [X+16],0x69
    0F2D: A0 63    JZ    0x0F91
    0F2F: 3D 0F 00 CMP   [X+15],0x0
    0F32: B0 06    JNZ   0x0F39
    0F34: 3D 10 6F CMP   [X+16],0x6F
    0F37: A0 84    JZ    0x0FBC
    0F39: 3D 0F 00 CMP   [X+15],0x0
    0F3C: B0 06    JNZ   0x0F43
    0F3E: 3D 10 70 CMP   [X+16],0x70
    0F41: A0 7A    JZ    0x0FBC
    0F43: 52 10    MOV   A,[X+16]
    0F45: 11 63    SUB   A,0x63
    0F47: 52 0F    MOV   A,[X+15]
    0F49: 31 80    XOR   A,0x80
    0F4B: 19 80    SBB   A,0x80
    0F4D: C0 21    JC    0x0F6F
    0F4F: 3D 0F 00 CMP   [X+15],0x0
    0F52: B0 06    JNZ   0x0F59
    0F54: 3D 10 73 CMP   [X+16],0x73
    0F57: A1 F6    JZ    0x114E
    0F59: 3D 0F 00 CMP   [X+15],0x0
    0F5C: B0 06    JNZ   0x0F63
    0F5E: 3D 10 75 CMP   [X+16],0x75
    0F61: A0 5A    JZ    0x0FBC
    0F63: 3D 0F 00 CMP   [X+15],0x0
    0F66: B0 06    JNZ   0x0F6D
    0F68: 3D 10 78 CMP   [X+16],0x78
    0F6B: A0 50    JZ    0x0FBC
    0F6D: 80 01    JMP   0x0F6F
    0F6F: 52 FA    MOV   A,[X-6]
    0F71: 53 07    MOV   [__r1],A
    0F73: 52 F9    MOV   A,[X-7]
    0F75: 10       PUSH  X
    0F76: 58 07    MOV   X,[__r1]
    0F78: 28       ROMX  
    0F79: 20       POP   X
    0F7A: 10       PUSH  X
    0F7B: 08       PUSH  A
    0F7C: 52 FC    MOV   A,[X-4]
    0F7E: 53 07    MOV   [__r1],A
    0F80: 52 FB    MOV   A,[X-5]
    0F82: 58 07    MOV   X,[__r1]
    0F84: 7C 0A FD LCALL __plcall
    0F87: 38 FF    ADD   SP,0xFF
    0F89: 20       POP   X
    0F8A: 77 05    INC   [X+5]
    0F8C: 0F 04 00 ADC   [X+4],0x0
    0F8F: 82 2C    JMP   0x11BC
    0F91: 52 F8    MOV   A,[X-8]
    0F93: 01 FE    ADD   A,0xFE
    0F95: 54 F8    MOV   [X-8],A
    0F97: 52 F8    MOV   A,[X-8]
    0F99: 53 07    MOV   [__r1],A
    0F9B: 3E 07    MVI   A,[__r1]
    0F9D: 54 0B    MOV   [X+11],A
    0F9F: 3E 07    MVI   A,[__r1]
    0FA1: 54 0C    MOV   [X+12],A
    0FA3: 50 00    MOV   A,0x0
    0FA5: 08       PUSH  A
    0FA6: 50 0A    MOV   A,0xA
    0FA8: 08       PUSH  A
    0FA9: 52 0B    MOV   A,[X+11]
    0FAB: 08       PUSH  A
    0FAC: 52 0C    MOV   A,[X+12]
    0FAE: 08       PUSH  A
    0FAF: 52 06    MOV   A,[X+6]
    0FB1: 08       PUSH  A
    0FB2: 52 07    MOV   A,[X+7]
    0FB4: 08       PUSH  A
    0FB5: 7C 0B 09 LCALL _itoa
    0FB8: 38 FA    ADD   SP,0xFA
    0FBA: 80 FC    JMP   0x10B7
    0FBC: 52 F8    MOV   A,[X-8]
    0FBE: 01 FE    ADD   A,0xFE
    0FC0: 54 F8    MOV   [X-8],A
    0FC2: 52 F8    MOV   A,[X-8]
    0FC4: 53 07    MOV   [__r1],A
    0FC6: 3E 07    MVI   A,[__r1]
    0FC8: 53 08    MOV   [__r0],A
    0FCA: 3E 07    MVI   A,[__r1]
    0FCC: 54 0C    MOV   [X+12],A
    0FCE: 51 08    MOV   A,[__r0]
    0FD0: 54 0B    MOV   [X+11],A
    0FD2: 52 FA    MOV   A,[X-6]
    0FD4: 53 07    MOV   [__r1],A
    0FD6: 52 F9    MOV   A,[X-7]
    0FD8: 10       PUSH  X
    0FD9: 58 07    MOV   X,[__r1]
    0FDB: 28       ROMX  
    0FDC: 20       POP   X
    0FDD: 39 75    CMP   A,0x75
    0FDF: B0 1A    JNZ   0x0FFA
    0FE1: 50 00    MOV   A,0x0
    0FE3: 08       PUSH  A
    0FE4: 50 0A    MOV   A,0xA
    0FE6: 08       PUSH  A
    0FE7: 52 0B    MOV   A,[X+11]
    0FE9: 08       PUSH  A
    0FEA: 52 0C    MOV   A,[X+12]
    0FEC: 08       PUSH  A
    0FED: 52 06    MOV   A,[X+6]
    0FEF: 08       PUSH  A
    0FF0: 52 07    MOV   A,[X+7]
    0FF2: 08       PUSH  A
    0FF3: 7C 0C 86 LCALL _utoa
    0FF6: 38 FA    ADD   SP,0xFA
    0FF8: 80 BE    JMP   0x10B7
    0FFA: 52 FA    MOV   A,[X-6]
    0FFC: 53 07    MOV   [__r1],A
    0FFE: 52 F9    MOV   A,[X-7]
    1000: 10       PUSH  X
    1001: 58 07    MOV   X,[__r1]
    1003: 28       ROMX  
    1004: 20       POP   X
    1005: 39 6F    CMP   A,0x6F
    1007: B0 1A    JNZ   0x1022
    1009: 50 00    MOV   A,0x0
    100B: 08       PUSH  A
    100C: 50 08    MOV   A,0x8
    100E: 08       PUSH  A
    100F: 52 0B    MOV   A,[X+11]
    1011: 08       PUSH  A
    1012: 52 0C    MOV   A,[X+12]
    1014: 08       PUSH  A
    1015: 52 06    MOV   A,[X+6]
    1017: 08       PUSH  A
    1018: 52 07    MOV   A,[X+7]
    101A: 08       PUSH  A
    101B: 7C 0C 86 LCALL _utoa
    101E: 38 FA    ADD   SP,0xFA
    1020: 80 96    JMP   0x10B7
    1022: 52 FA    MOV   A,[X-6]
    1024: 53 07    MOV   [__r1],A
    1026: 52 F9    MOV   A,[X-7]
    1028: 10       PUSH  X
    1029: 58 07    MOV   X,[__r1]
    102B: 28       ROMX  
    102C: 20       POP   X
    102D: 39 70    CMP   A,0x70
    102F: B0 31    JNZ   0x1061
    1031: 52 07    MOV   A,[X+7]
    1033: 53 07    MOV   [__r1],A
    1035: 52 06    MOV   A,[X+6]
    1037: 53 08    MOV   [__r0],A
    1039: 51 07    MOV   A,[__r1]
    103B: 01 01    ADD   A,0x1
    103D: 54 07    MOV   [X+7],A
    103F: 51 08    MOV   A,[__r0]
    1041: 09 00    ADC   A,0x0
    1043: 54 06    MOV   [X+6],A
    1045: 50 30    MOV   A,0x30
    1047: 3F 07    MVI   [__r1],A
    1049: 52 07    MOV   A,[X+7]
    104B: 53 07    MOV   [__r1],A
    104D: 52 06    MOV   A,[X+6]
    104F: 53 08    MOV   [__r0],A
    1051: 51 07    MOV   A,[__r1]
    1053: 01 01    ADD   A,0x1
    1055: 54 07    MOV   [X+7],A
    1057: 51 08    MOV   A,[__r0]
    1059: 09 00    ADC   A,0x0
    105B: 54 06    MOV   [X+6],A
    105D: 50 78    MOV   A,0x78
    105F: 3F 07    MVI   [__r1],A
    1061: 50 00    MOV   A,0x0
    1063: 08       PUSH  A
    1064: 50 10    MOV   A,0x10
    1066: 08       PUSH  A
    1067: 52 0B    MOV   A,[X+11]
    1069: 08       PUSH  A
    106A: 52 0C    MOV   A,[X+12]
    106C: 08       PUSH  A
    106D: 52 06    MOV   A,[X+6]
    106F: 08       PUSH  A
    1070: 52 07    MOV   A,[X+7]
    1072: 08       PUSH  A
    1073: 7C 0C 86 LCALL _utoa
    1076: 38 FA    ADD   SP,0xFA
    1078: 52 FA    MOV   A,[X-6]
    107A: 53 07    MOV   [__r1],A
    107C: 52 F9    MOV   A,[X-7]
    107E: 10       PUSH  X
    107F: 58 07    MOV   X,[__r1]
    1081: 28       ROMX  
    1082: 20       POP   X
    1083: 39 58    CMP   A,0x58
    1085: B0 31    JNZ   0x10B7
    1087: 56 01 12 MOV   [X+1],0x12
    108A: 56 00 00 MOV   [X+0],0x0
    108D: 80 21    JMP   0x10AF
    108F: 52 01    MOV   A,[X+1]
    1091: 53 07    MOV   [__r1],A
    1093: 3E 07    MVI   A,[__r1]
    1095: 53 07    MOV   [__r1],A
    1097: 50 00    MOV   A,0x0
    1099: 08       PUSH  A
    109A: 51 07    MOV   A,[__r1]
    109C: 08       PUSH  A
    109D: 7C 0D DE LCALL _toupper
    10A0: 38 FE    ADD   SP,0xFE
    10A2: 52 01    MOV   A,[X+1]
    10A4: 53 05    MOV   [__r3],A
    10A6: 51 07    MOV   A,[__r1]
    10A8: 3F 05    MVI   [__r3],A
    10AA: 77 01    INC   [X+1]
    10AC: 0F 00 00 ADC   [X+0],0x0
    10AF: 52 01    MOV   A,[X+1]
    10B1: 53 07    MOV   [__r1],A
    10B3: 3E 07    MVI   A,[__r1]
    10B5: BF D9    JNZ   0x108F
    10B7: 56 01 12 MOV   [X+1],0x12
    10BA: 56 00 00 MOV   [X+0],0x0
    10BD: 80 AE    JMP   0x116C
    10BF: 52 F8    MOV   A,[X-8]
    10C1: 01 FE    ADD   A,0xFE
    10C3: 54 F8    MOV   [X-8],A
    10C5: 52 F8    MOV   A,[X-8]
    10C7: 53 07    MOV   [__r1],A
    10C9: 3E 07    MVI   A,[__r1]
    10CB: 3E 07    MVI   A,[__r1]
    10CD: 54 0D    MOV   [X+13],A
    10CF: 10       PUSH  X
    10D0: 52 0D    MOV   A,[X+13]
    10D2: 08       PUSH  A
    10D3: 52 FC    MOV   A,[X-4]
    10D5: 53 07    MOV   [__r1],A
    10D7: 52 FB    MOV   A,[X-5]
    10D9: 58 07    MOV   X,[__r1]
    10DB: 7C 0A FD LCALL __plcall
    10DE: 38 FF    ADD   SP,0xFF
    10E0: 20       POP   X
    10E1: 77 05    INC   [X+5]
    10E3: 0F 04 00 ADC   [X+4],0x0
    10E6: 80 D5    JMP   0x11BC
    10E8: 52 F8    MOV   A,[X-8]
    10EA: 01 FE    ADD   A,0xFE
    10EC: 54 F8    MOV   [X-8],A
    10EE: 52 F8    MOV   A,[X-8]
    10F0: 53 07    MOV   [__r1],A
    10F2: 3E 07    MVI   A,[__r1]
    10F4: 54 02    MOV   [X+2],A
    10F6: 3E 07    MVI   A,[__r1]
    10F8: 54 03    MOV   [X+3],A
    10FA: 3D 08 2D CMP   [X+8],0x2D
    10FD: B0 3F    JNZ   0x113D
    10FF: 10       PUSH  X
    1100: 50 2D    MOV   A,0x2D
    1102: 08       PUSH  A
    1103: 52 FC    MOV   A,[X-4]
    1105: 53 07    MOV   [__r1],A
    1107: 52 FB    MOV   A,[X-5]
    1109: 58 07    MOV   X,[__r1]
    110B: 7C 0A FD LCALL __plcall
    110E: 38 FF    ADD   SP,0xFF
    1110: 20       POP   X
    1111: 77 05    INC   [X+5]
    1113: 0F 04 00 ADC   [X+4],0x0
    1116: 80 26    JMP   0x113D
    1118: 52 03    MOV   A,[X+3]
    111A: 53 07    MOV   [__r1],A
    111C: 52 02    MOV   A,[X+2]
    111E: 10       PUSH  X
    111F: 58 07    MOV   X,[__r1]
    1121: 28       ROMX  
    1122: 20       POP   X
    1123: 10       PUSH  X
    1124: 08       PUSH  A
    1125: 52 FC    MOV   A,[X-4]
    1127: 53 07    MOV   [__r1],A
    1129: 52 FB    MOV   A,[X-5]
    112B: 58 07    MOV   X,[__r1]
    112D: 7C 0A FD LCALL __plcall
    1130: 38 FF    ADD   SP,0xFF
    1132: 20       POP   X
    1133: 77 05    INC   [X+5]
    1135: 0F 04 00 ADC   [X+4],0x0
    1138: 77 03    INC   [X+3]
    113A: 0F 02 00 ADC   [X+2],0x0
    113D: 52 03    MOV   A,[X+3]
    113F: 53 07    MOV   [__r1],A
    1141: 52 02    MOV   A,[X+2]
    1143: 10       PUSH  X
    1144: 58 07    MOV   X,[__r1]
    1146: 28       ROMX  
    1147: 20       POP   X
    1148: 39 00    CMP   A,0x0
    114A: BF CD    JNZ   0x1118
    114C: 80 6F    JMP   0x11BC
    114E: 52 F8    MOV   A,[X-8]
    1150: 01 FE    ADD   A,0xFE
    1152: 54 F8    MOV   [X-8],A
    1154: 52 F8    MOV   A,[X-8]
    1156: 53 07    MOV   [__r1],A
    1158: 3E 07    MVI   A,[__r1]
    115A: 54 00    MOV   [X+0],A
    115C: 3E 07    MVI   A,[__r1]
    115E: 54 01    MOV   [X+1],A
    1160: 52 01    MOV   A,[X+1]
    1162: B0 09    JNZ   0x116C
    1164: 56 03 A7 MOV   [X+3],0xA7
    1167: 56 02 02 MOV   [X+2],0x2
    116A: 8F 8F    JMP   0x10FA
    116C: 3D 08 2D CMP   [X+8],0x2D
    116F: B0 3A    JNZ   0x11AA
    1171: 10       PUSH  X
    1172: 50 2D    MOV   A,0x2D
    1174: 08       PUSH  A
    1175: 52 FC    MOV   A,[X-4]
    1177: 53 07    MOV   [__r1],A
    1179: 52 FB    MOV   A,[X-5]
    117B: 58 07    MOV   X,[__r1]
    117D: 7C 0A FD LCALL __plcall
    1180: 38 FF    ADD   SP,0xFF
    1182: 20       POP   X
    1183: 77 05    INC   [X+5]
    1185: 0F 04 00 ADC   [X+4],0x0
    1188: 80 21    JMP   0x11AA
    118A: 52 01    MOV   A,[X+1]
    118C: 53 07    MOV   [__r1],A
    118E: 3E 07    MVI   A,[__r1]
    1190: 10       PUSH  X
    1191: 08       PUSH  A
    1192: 52 FC    MOV   A,[X-4]
    1194: 53 07    MOV   [__r1],A
    1196: 52 FB    MOV   A,[X-5]
    1198: 58 07    MOV   X,[__r1]
    119A: 7C 0A FD LCALL __plcall
    119D: 38 FF    ADD   SP,0xFF
    119F: 20       POP   X
    11A0: 77 05    INC   [X+5]
    11A2: 0F 04 00 ADC   [X+4],0x0
    11A5: 77 01    INC   [X+1]
    11A7: 0F 00 00 ADC   [X+0],0x0
    11AA: 52 01    MOV   A,[X+1]
    11AC: 53 07    MOV   [__r1],A
    11AE: 3E 07    MVI   A,[__r1]
    11B0: BF D9    JNZ   0x118A
    11B2: 80 09    JMP   0x11BC
    11B4: 56 03 B9 MOV   [X+3],0xB9
    11B7: 56 02 02 MOV   [X+2],0x2
    11BA: 8F 3F    JMP   0x10FA
    11BC: 77 FA    INC   [X-6]
    11BE: 0F F9 00 ADC   [X-7],0x0
    11C1: 52 FA    MOV   A,[X-6]
    11C3: 53 07    MOV   [__r1],A
    11C5: 52 F9    MOV   A,[X-7]
    11C7: 10       PUSH  X
    11C8: 58 07    MOV   X,[__r1]
    11CA: 28       ROMX  
    11CB: 20       POP   X
    11CC: 39 00    CMP   A,0x0
    11CE: BC A9    JNZ   0x0E78
    11D0: 52 05    MOV   A,[X+5]
    11D2: 53 07    MOV   [__r1],A
    11D4: 52 04    MOV   A,[X+4]
    11D6: 53 08    MOV   [__r0],A
    11D8: 38 EF    ADD   SP,0xEF
    11DA: 20       POP   X
    11DB: 7F       RET   
    11DC: 10       PUSH  X
    11DD: 4F       MOV   X,SP
    11DE: 38 04    ADD   SP,0x4
    11E0: 80 06    JMP   0x11E7
    11E2: 77 FC    INC   [X-4]
    11E4: 0F FB 00 ADC   [X-5],0x0
    11E7: 52 FC    MOV   A,[X-4]
    11E9: 53 07    MOV   [__r1],A
    11EB: 52 FB    MOV   A,[X-5]
    11ED: 10       PUSH  X
    11EE: 58 07    MOV   X,[__r1]
    11F0: 28       ROMX  
    11F1: 20       POP   X
    11F2: 53 07    MOV   [__r1],A
    11F4: 50 00    MOV   A,0x0
    11F6: 08       PUSH  A
    11F7: 51 07    MOV   A,[__r1]
    11F9: 08       PUSH  A
    11FA: 7C 0D C0 LCALL _isspace
    11FD: 38 FE    ADD   SP,0xFE
    11FF: 3C 08 00 CMP   [__r0],0x0
    1202: BF DF    JNZ   0x11E2
    1204: 3C 07 00 CMP   [__r1],0x0
    1207: BF DA    JNZ   0x11E2
    1209: 56 03 00 MOV   [X+3],0x0
    120C: 56 02 00 MOV   [X+2],0x0
    120F: 52 FC    MOV   A,[X-4]
    1211: 53 07    MOV   [__r1],A
    1213: 52 FB    MOV   A,[X-5]
    1215: 10       PUSH  X
    1216: 58 07    MOV   X,[__r1]
    1218: 28       ROMX  
    1219: 20       POP   X
    121A: 39 2D    CMP   A,0x2D
    121C: B0 0E    JNZ   0x122B
    121E: 56 03 01 MOV   [X+3],0x1
    1221: 56 02 00 MOV   [X+2],0x0
    1224: 77 FC    INC   [X-4]
    1226: 0F FB 00 ADC   [X-5],0x0
    1229: 80 15    JMP   0x123F
    122B: 52 FC    MOV   A,[X-4]
    122D: 53 07    MOV   [__r1],A
    122F: 52 FB    MOV   A,[X-5]
    1231: 10       PUSH  X
    1232: 58 07    MOV   X,[__r1]
    1234: 28       ROMX  
    1235: 20       POP   X
    1236: 39 2B    CMP   A,0x2B
    1238: B0 06    JNZ   0x123F
    123A: 77 FC    INC   [X-4]
    123C: 0F FB 00 ADC   [X-5],0x0
    123F: 56 01 00 MOV   [X+1],0x0
    1242: 56 00 00 MOV   [X+0],0x0
    1245: 80 73    JMP   0x12B9
    1247: 52 FC    MOV   A,[X-4]
    1249: 53 07    MOV   [__r1],A
    124B: 52 FB    MOV   A,[X-5]
    124D: 53 08    MOV   [__r0],A
    124F: 51 07    MOV   A,[__r1]
    1251: 01 01    ADD   A,0x1
    1253: 54 FC    MOV   [X-4],A
    1255: 51 08    MOV   A,[__r0]
    1257: 09 00    ADC   A,0x0
    1259: 54 FB    MOV   [X-5],A
    125B: 52 01    MOV   A,[X+1]
    125D: 53 05    MOV   [__r3],A
    125F: 52 00    MOV   A,[X+0]
    1261: 53 06    MOV   [__r2],A
    1263: 55 03 0A MOV   [__r5],0xA
    1266: 55 04 00 MOV   [__r4],0x0
    1269: 55 02 00 MOV   [__rX],0x0
    126C: 55 01 00 MOV   [__rY],0x0
    126F: 3C 04 00 CMP   [__r4],0x0
    1272: B0 06    JNZ   0x1279
    1274: 3C 03 00 CMP   [__r5],0x0
    1277: A0 17    JZ    0x128F
    1279: 70 FB    AND   F,0xFB
    127B: 6E 04    RRC   [__r4]
    127D: 6E 03    RRC   [__r5]
    127F: D0 09    JNC   0x1289
    1281: 51 05    MOV   A,[__r3]
    1283: 04 02    ADD   [__rX],A
    1285: 51 06    MOV   A,[__r2]
    1287: 0C 01    ADC   [__rY],A
    1289: 65 05    ASL   [__r3]
    128B: 6B 06    RLC   [__r2]
    128D: 8F E1    JMP   0x126F
    128F: 5F 05 02 MOV   [__r3],[__rX]
    1292: 5F 06 01 MOV   [__r2],[__rY]
    1295: 51 08    MOV   A,[__r0]
    1297: 10       PUSH  X
    1298: 58 07    MOV   X,[__r1]
    129A: 28       ROMX  
    129B: 20       POP   X
    129C: 53 07    MOV   [__r1],A
    129E: 55 08 00 MOV   [__r0],0x0
    12A1: 51 05    MOV   A,[__r3]
    12A3: 02 07    ADD   A,[__r1]
    12A5: 53 07    MOV   [__r1],A
    12A7: 51 06    MOV   A,[__r2]
    12A9: 0A 08    ADC   A,[__r0]
    12AB: 53 08    MOV   [__r0],A
    12AD: 51 07    MOV   A,[__r1]
    12AF: 11 30    SUB   A,0x30
    12B1: 54 01    MOV   [X+1],A
    12B3: 51 08    MOV   A,[__r0]
    12B5: 19 00    SBB   A,0x0
    12B7: 54 00    MOV   [X+0],A
    12B9: 52 FC    MOV   A,[X-4]
    12BB: 53 07    MOV   [__r1],A
    12BD: 52 FB    MOV   A,[X-5]
    12BF: 10       PUSH  X
    12C0: 58 07    MOV   X,[__r1]
    12C2: 28       ROMX  
    12C3: 20       POP   X
    12C4: 53 07    MOV   [__r1],A
    12C6: 50 00    MOV   A,0x0
    12C8: 08       PUSH  A
    12C9: 51 07    MOV   A,[__r1]
    12CB: 08       PUSH  A
    12CC: 7C 0D 84 LCALL _isdigit
    12CF: 38 FE    ADD   SP,0xFE
    12D1: 3C 08 00 CMP   [__r0],0x0
    12D4: BF 72    JNZ   0x1247
    12D6: 3C 07 00 CMP   [__r1],0x0
    12D9: BF 6D    JNZ   0x1247
    12DB: 3D 02 00 CMP   [X+2],0x0
    12DE: B0 06    JNZ   0x12E5
    12E0: 3D 03 00 CMP   [X+3],0x0
    12E3: A0 11    JZ    0x12F5
    12E5: 52 01    MOV   A,[X+1]
    12E7: 73       CPL   A
    12E8: 11 FF    SUB   A,0xFF
    12EA: 53 07    MOV   [__r1],A
    12EC: 52 00    MOV   A,[X+0]
    12EE: 73       CPL   A
    12EF: 19 FF    SBB   A,0xFF
    12F1: 53 08    MOV   [__r0],A
    12F3: 80 09    JMP   0x12FD
    12F5: 52 01    MOV   A,[X+1]
    12F7: 53 07    MOV   [__r1],A
    12F9: 52 00    MOV   A,[X+0]
    12FB: 53 08    MOV   [__r0],A
    12FD: 38 FC    ADD   SP,0xFC
    12FF: 20       POP   X
    1300: 7F       RET   

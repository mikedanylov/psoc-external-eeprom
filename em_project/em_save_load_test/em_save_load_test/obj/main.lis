                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _gFlagButton1::
 0000                   .blkb 2
                        .area idata(rom,lit)
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile ./main.c
 0002                   .dbfile C:\Users\PHUONG~1.NGU\DOCUME~1\PSOCDE~1.4PR\EM_PRO~1\EM_SAV~1\EM_SAV~1\main.c
 0002                   .dbsym e gFlagButton1 _gFlagButton1 I
 0002           _gFlagButton2::
 0002                   .blkb 2
                        .area idata(rom,lit)
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile C:\Users\PHUONG~1.NGU\DOCUME~1\PSOCDE~1.4PR\EM_PRO~1\EM_SAV~1\EM_SAV~1\main.c
 0004                   .dbsym e gFlagButton2 _gFlagButton2 I
 0004           _gFlagButton3::
 0004                   .blkb 2
                        .area idata(rom,lit)
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile C:\Users\PHUONG~1.NGU\DOCUME~1\PSOCDE~1.4PR\EM_PRO~1\EM_SAV~1\EM_SAV~1\main.c
 0006                   .dbsym e gFlagButton3 _gFlagButton3 I
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\PHUONG~1.NGU\DOCUME~1\PSOCDE~1.4PR\EM_PRO~1\EM_SAV~1\EM_SAV~1\main.c
 0000                   .dbfunc e buttonInterrupt _buttonInterrupt fV
 0000           _buttonInterrupt::
 0000                   .dbline -1
 0000 08                push A
 0001 5100              mov A,[__r0]
 0003 08                push A
 0004                   .dbline 21
 0004           ; //-----------------------------------------------------------------------
 0004           ; // Sample C code to communicate with the Dallas DS1307 clock/EEROM
 0004           ; // via the I2C interface.  
 0004           ; // 
 0004           ; // This code sets the time, then reads the 7-byte time string back
 0004           ; // over and over in a loop.  
 0004           ; // The address of the DS1307 is 0x68.
 0004           ; //-----------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include <stdio.h>
 0004           ; 
 0004           ; #define DEVADD 0x50
 0004           ; 
 0004           ; volatile int gFlagButton1 = 0;
 0004           ; volatile int gFlagButton2 = 0;
 0004           ; volatile int gFlagButton3 = 0;
 0004           ; 
 0004           ; #pragma interrupt_handler buttonInterrupt
 0004           ; void buttonInterrupt(void) {
 0004                   .dbline 22
 0004           ;       M8C_DisableIntMask(INT_MSK0, INT_MSK0_GPIO);
 0004 41E0DF            and REG[0xe0],-33
 0007                   .dbline 23
 0007           ;       if (Button1_Data_ADDR & Button1_MASK) {
 0007 5D04              mov A,REG[0x4]
 0009 5300              mov [__r0],A
 000B 470004            tst [__r0],4
 000E A009              jz L2
 0010                   .dbline 24
 0010           ;               gFlagButton1 = 1;
 0010                   .dbline 24
 0010 550101            mov [_gFlagButton1+1],1
 0013 550000            mov [_gFlagButton1],0
 0016                   .dbline 25
 0016           ;               return;
 0016 8026              xjmp L1
 0018           L2:
 0018                   .dbline 27
 0018           ;       }
 0018           ;       if (Button2_Data_ADDR & Button2_MASK) {
 0018 5D04              mov A,REG[0x4]
 001A 5300              mov [__r0],A
 001C 470002            tst [__r0],2
 001F A009              jz L4
 0021                   .dbline 28
 0021           ;               gFlagButton2 = 1;
 0021                   .dbline 28
 0021 550301            mov [_gFlagButton2+1],1
 0024 550200            mov [_gFlagButton2],0
 0027                   .dbline 29
 0027           ;               return;
 0027 8015              xjmp L1
 0029           L4:
 0029                   .dbline 31
 0029           ;       }
 0029           ;       if (Button3_Data_ADDR & Button3_MASK) {
 0029 5D04              mov A,REG[0x4]
 002B 5300              mov [__r0],A
 002D 470001            tst [__r0],1
 0030 A009              jz L6
 0032                   .dbline 32
 0032           ;               gFlagButton3 = 1;
 0032                   .dbline 32
 0032 550501            mov [_gFlagButton3+1],1
 0035 550400            mov [_gFlagButton3],0
 0038                   .dbline 33
 0038           ;               return;
 0038 8004              xjmp L1
 003A           L6:
 003A                   .dbline 35
 003A           ;       }
 003A           ;       M8C_EnableIntMask(INT_MSK0 , INT_MSK0_GPIO);
 003A 43E020            or REG[0xe0],32
 003D                   .dbline -2
 003D           L1:
 003D 18                pop A
 003E 5300              mov [__r0],A
 0040 18                pop A
 0041                   .dbline 0 ; func end
 0041 7E                reti
 0042                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L9:
 0000 0000              .byte 0,0
                        .area text(rom, con, rel)
 0042                   .dbfile C:\Users\PHUONG~1.NGU\DOCUME~1\PSOCDE~1.4PR\EM_PRO~1\EM_SAV~1\EM_SAV~1\main.c
 0042                   .dbfunc e main _main fV
 0042           ;         status -> X+4
 0042           ;          count -> X+2
 0042           ;              i -> X+0
 0042           _main::
 0042                   .dbline -1
 0042 10                push X
 0043 4F                mov X,SP
 0044 3805              add SP,5
 0046                   .dbline 39
 0046           ; }
 0046           ; 
 0046           ; void main(void)
 0046           ; {
 0046                   .dbline 41
 0046           ;       int i;
 0046           ;       BYTE count[] = { 0x00, 0 };
 0046 550000            mov [__r1],<L9
 0049 550000            mov [__r0],>L9
 004C 5A00              mov [__r3],X
 004E 060002            add [__r3],2
 0051 10                push X
 0052 550000            mov [__rX],0
 0055 5100              mov A,[__r0]
 0057 5800              mov X,[__r1]
 0059           X1:
 0059 08                push A
 005A 28                romx
 005B 3F00              mvi [__r3],A
 005D 18                pop A
 005E 75                inc X
 005F 0900              adc A,0
 0061 7600              inc [__rX]
 0063 3C0002            cmp [__rX],2
 0066 BFF2              jnz X1
 0068 20                pop X
 0069                   .dbline 44
 0069           ;       BYTE status;
 0069           ;       
 0069           ;       M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0069 7101                      or  F, 01h
 006B           
 006B                   .dbline 45
 006B           ;       M8C_EnableIntMask(INT_MSK0 , INT_MSK0_GPIO); // Switch on the GPIO interrupt enable
 006B 43E020            or REG[0xe0],32
 006E                   .dbline 47
 006E           ;       
 006E           ;       I2Cm_Start();
 006E 10                push X
 006F 7C0000            xcall _I2Cm_Start
 0072                   .dbline 48
 0072           ;       LCD_Start();
 0072 7C0000            xcall _LCD_Start
 0075 20                pop X
 0076           L10:
 0076                   .dbline 50
 0076           ;       
 0076           ;       do {
 0076                   .dbline 51
 0076           ;               LCD_Position(0,0);
 0076 10                push X
 0077 5000              mov A,0
 0079 5700              mov X,0
 007B 7C0000            xcall _LCD_Position
 007E 20                pop X
 007F                   .dbline 52
 007F           ;               LCD_PrHexInt(count[1]);
 007F 5203              mov A,[X+3]
 0081 10                push X
 0082 5700              mov X,0
 0084 7C0000            xcall _LCD_PrHexInt
 0087 20                pop X
 0088                   .dbline 54
 0088           ;               
 0088           ;               if (gFlagButton1 == 1) {
 0088 3C0000            cmp [_gFlagButton1],0
 008B B03B              jnz L14
 008D 3C0101            cmp [_gFlagButton1+1],1
 0090 B036              jnz L14
 0092           X2:
 0092                   .dbline 55
 0092           ;                       LCD_Position(1,0);
 0092                   .dbline 55
 0092 10                push X
 0093 5700              mov X,0
 0095 5001              mov A,1
 0097 7C0000            xcall _LCD_Position
 009A                   .dbline 56
 009A           ;                       LCD_PrCString("INCREMENTED");
 009A 503E              mov A,>L16
 009C 08                push A
 009D 503E              mov A,<L16
 009F 5C                mov X,A
 00A0 18                pop A
 00A1 7C0000            xcall _LCD_PrCString
 00A4 20                pop X
 00A5                   .dbline 58
 00A5           ;                       
 00A5           ;                       count[1]++;
 00A5 7703              inc [X+3]
 00A7                   .dbline 59
 00A7           ;                       for (i = 0; i < 20000; i++);
 00A7 560100            mov [X+1],0
 00AA 560000            mov [X+0],0
 00AD           L18:
 00AD                   .dbline 59
 00AD           L19:
 00AD                   .dbline 59
 00AD 7701              inc [X+1]
 00AF 0F0000            adc [X+0],0
 00B2                   .dbline 59
 00B2 5201              mov A,[X+1]
 00B4 1120              sub A,32
 00B6 5200              mov A,[X+0]
 00B8 3180              xor A,-128
 00BA 19CE              sbb A,(78 ^ 0x80)
 00BC CFF0              jc L18
 00BE           X3:
 00BE                   .dbline 61
 00BE           ;                       
 00BE           ;                       gFlagButton1 = 0;
 00BE 550100            mov [_gFlagButton1+1],0
 00C1 550000            mov [_gFlagButton1],0
 00C4                   .dbline 62
 00C4           ;                       M8C_EnableIntMask(INT_MSK0 , INT_MSK0_GPIO);
 00C4 43E020            or REG[0xe0],32
 00C7                   .dbline 63
 00C7           ;               }
 00C7           L14:
 00C7                   .dbline 65
 00C7           ;               
 00C7           ;               if (gFlagButton2 == 1) {
 00C7 3C0200            cmp [_gFlagButton2],0
 00CA B06C              jnz L22
 00CC 3C0301            cmp [_gFlagButton2+1],1
 00CF B067              jnz L22
 00D1           X4:
 00D1                   .dbline 66
 00D1           ;                       LCD_Position(1,0);
 00D1                   .dbline 66
 00D1 10                push X
 00D2 5700              mov X,0
 00D4 5001              mov A,1
 00D6 7C0000            xcall _LCD_Position
 00D9                   .dbline 67
 00D9           ;                       LCD_PrCString("SAVING     ");
 00D9 5032              mov A,>L24
 00DB 08                push A
 00DC 5032              mov A,<L24
 00DE 5C                mov X,A
 00DF 18                pop A
 00E0 7C0000            xcall _LCD_PrCString
 00E3 20                pop X
 00E4                   .dbline 71
 00E4           ;                       
 00E4           ;                       // Save the number
 00E4           ;                       // Set the address at 0x00 and write count[1] value to that place
 00E4           ;                       status = I2Cm_bWriteBytes(DEVADD, count, 2, I2Cm_CompleteXfer);
 00E4 10                push X
 00E5 5000              mov A,0
 00E7 08                push A
 00E8 5002              mov A,2
 00EA 08                push A
 00EB 5A00              mov [__r1],X
 00ED 060002            add [__r1],2
 00F0 5100              mov A,[__r0]
 00F2 08                push A
 00F3 5100              mov A,[__r1]
 00F5 08                push A
 00F6 5050              mov A,80
 00F8 08                push A
 00F9 7C0000            xcall _I2Cm_bWriteBytes
 00FC 38FB              add SP,-5
 00FE 20                pop X
 00FF 5404              mov [X+4],A
 0101                   .dbline 73
 0101           ;                       
 0101           ;                       if (status != 0) {
 0101 3D0400            cmp [X+4],0
 0104 A016              jz L25
 0106                   .dbline 74
 0106           ;                               LCD_Position(1,0);
 0106                   .dbline 74
 0106 10                push X
 0107 5700              mov X,0
 0109 5001              mov A,1
 010B 7C0000            xcall _LCD_Position
 010E                   .dbline 75
 010E           ;                               LCD_PrCString("SAVED      ");
 010E 5026              mov A,>L27
 0110 08                push A
 0111 5026              mov A,<L27
 0113 5C                mov X,A
 0114 18                pop A
 0115 7C0000            xcall _LCD_PrCString
 0118 20                pop X
 0119                   .dbline 76
 0119           ;                       }
 0119 8014              xjmp L26
 011B           L25:
 011B                   .dbline 77
 011B           ;                       else {
 011B                   .dbline 78
 011B           ;                               LCD_Position(1,0);
 011B 10                push X
 011C 5700              mov X,0
 011E 5001              mov A,1
 0120 7C0000            xcall _LCD_Position
 0123                   .dbline 79
 0123           ;                               LCD_PrCString("FAILED     ");
 0123 501A              mov A,>L28
 0125 08                push A
 0126 501A              mov A,<L28
 0128 5C                mov X,A
 0129 18                pop A
 012A 7C0000            xcall _LCD_PrCString
 012D 20                pop X
 012E                   .dbline 80
 012E           ;                       }
 012E           L26:
 012E                   .dbline 82
 012E           ;                       
 012E           ;                       gFlagButton2 = 0;
 012E 550300            mov [_gFlagButton2+1],0
 0131 550200            mov [_gFlagButton2],0
 0134                   .dbline 83
 0134           ;                       M8C_EnableIntMask(INT_MSK0 , INT_MSK0_GPIO);
 0134 43E020            or REG[0xe0],32
 0137                   .dbline 84
 0137           ;               }
 0137           L22:
 0137                   .dbline 86
 0137           ;               
 0137           ;               if (gFlagButton3 == 1) {
 0137 3C0400            cmp [_gFlagButton3],0
 013A B087              jnz L29
 013C 3C0501            cmp [_gFlagButton3+1],1
 013F B082              jnz L29
 0141           X5:
 0141                   .dbline 87
 0141           ;                       LCD_Position(1,0);
 0141                   .dbline 87
 0141 10                push X
 0142 5700              mov X,0
 0144 5001              mov A,1
 0146 7C0000            xcall _LCD_Position
 0149                   .dbline 88
 0149           ;                       LCD_PrCString("LOADING    ");
 0149 500E              mov A,>L31
 014B 08                push A
 014C 500E              mov A,<L31
 014E 5C                mov X,A
 014F 18                pop A
 0150 7C0000            xcall _LCD_PrCString
 0153 20                pop X
 0154                   .dbline 91
 0154           ;                       
 0154           ;                       // Load the number
 0154           ;                       I2Cm_bWriteBytes(DEVADD, count, 1, I2Cm_NoStop); // Set the address at 0x00
 0154 10                push X
 0155 5002              mov A,2
 0157 08                push A
 0158 5001              mov A,1
 015A 08                push A
 015B 5A00              mov [__r1],X
 015D 060002            add [__r1],2
 0160 5100              mov A,[__r0]
 0162 08                push A
 0163 5100              mov A,[__r1]
 0165 08                push A
 0166 5050              mov A,80
 0168 08                push A
 0169 7C0000            xcall _I2Cm_bWriteBytes
 016C 38FB              add SP,-5
 016E 20                pop X
 016F 5300              mov [__r0],A
 0171                   .dbline 92
 0171           ;                       status = I2Cm_fReadBytes(DEVADD, &count[1], 1, I2Cm_RepStart); // Write count[1] value to that place
 0171 10                push X
 0172 5001              mov A,1
 0174 08                push A
 0175 08                push A
 0176 5A00              mov [__r1],X
 0178 060003            add [__r1],3
 017B 5100              mov A,[__r0]
 017D 08                push A
 017E 5100              mov A,[__r1]
 0180 08                push A
 0181 5050              mov A,80
 0183 08                push A
 0184 7C0000            xcall _I2Cm_fReadBytes
 0187 38FB              add SP,-5
 0189 20                pop X
 018A 5404              mov [X+4],A
 018C                   .dbline 94
 018C           ;                       
 018C           ;                       if (status != 0) {
 018C 3D0400            cmp [X+4],0
 018F A016              jz L33
 0191                   .dbline 95
 0191           ;                               LCD_Position(1,0);
 0191                   .dbline 95
 0191 10                push X
 0192 5700              mov X,0
 0194 5001              mov A,1
 0196 7C0000            xcall _LCD_Position
 0199                   .dbline 96
 0199           ;                               LCD_PrCString("LOADED     ");
 0199 5002              mov A,>L35
 019B 08                push A
 019C 5002              mov A,<L35
 019E 5C                mov X,A
 019F 18                pop A
 01A0 7C0000            xcall _LCD_PrCString
 01A3 20                pop X
 01A4                   .dbline 97
 01A4           ;                       }
 01A4 8014              xjmp L34
 01A6           L33:
 01A6                   .dbline 98
 01A6           ;                       else {
 01A6                   .dbline 99
 01A6           ;                               LCD_Position(1,0);
 01A6 10                push X
 01A7 5700              mov X,0
 01A9 5001              mov A,1
 01AB 7C0000            xcall _LCD_Position
 01AE                   .dbline 100
 01AE           ;                               LCD_PrCString("FAILED     ");
 01AE 501A              mov A,>L28
 01B0 08                push A
 01B1 501A              mov A,<L28
 01B3 5C                mov X,A
 01B4 18                pop A
 01B5 7C0000            xcall _LCD_PrCString
 01B8 20                pop X
 01B9                   .dbline 101
 01B9           ;                       }
 01B9           L34:
 01B9                   .dbline 103
 01B9           ;                       
 01B9           ;                       gFlagButton3 = 0;
 01B9 550500            mov [_gFlagButton3+1],0
 01BC 550400            mov [_gFlagButton3],0
 01BF                   .dbline 104
 01BF           ;                       M8C_EnableIntMask(INT_MSK0 , INT_MSK0_GPIO);
 01BF 43E020            or REG[0xe0],32
 01C2                   .dbline 105
 01C2           ;               }
 01C2           L29:
 01C2                   .dbline 106
 01C2           ;       } while(1);
 01C2           L11:
 01C2                   .dbline 106
 01C2 8EB3              xjmp L10
 01C4           X0:
 01C4                   .dbline -2
 01C4           L8:
 01C4 38FB              add SP,-5
 01C6 20                pop X
 01C7                   .dbline 0 ; func end
 01C7 8FFF              jmp .
 01C9                   .dbsym l status 4 c
 01C9                   .dbsym l count 2 A[2:2]c
 01C9                   .dbsym l i 0 I
 01C9                   .dbend
                        .area lit(rom, con, rel, lit)
 0002           L35:
 0002 4C4F41444544202020202000  .byte 'L,'O,'A,'D,'E,'D,32,32,32,32,32,0
 000E           L31:
 000E 4C4F4144494E472020202000  .byte 'L,'O,'A,'D,'I,'N,'G,32,32,32,32,0
 001A           L28:
 001A 4641494C4544202020202000  .byte 'F,'A,'I,'L,'E,'D,32,32,32,32,32,0
 0026           L27:
 0026 534156454420202020202000  .byte 'S,'A,'V,'E,'D,32,32,32,32,32,32,0
 0032           L24:
 0032 534156494E47202020202000  .byte 'S,'A,'V,'I,'N,'G,32,32,32,32,32,0
 003E           L16:
 003E 494E4352454D454E54454400  .byte 'I,'N,'C,'R,'E,'M,'E,'N,'T,'E,'D,0
